// Teste para otimizações do código intermediário
int main() {
    int a = 10;
    int b = 20;
    int c = 30;
    
    // Subexpressões comuns - podem ser otimizadas para calcular (a + b) apenas uma vez
    int expr1 = (a + b) * c;
    int expr2 = (a + b) / 2;
    
    // Propagação de constantes - x pode ser substituído por 5 em todas as ocorrências
    int x = 5;
    int y = x + 10;
    int z = x * 3;
    
    // Código morto - algumas atribuições podem ser eliminadas
    int valor = 100;
    valor = 200;  // A primeira atribuição é código morto
    
    // Invariante de loop - a expressão (b + c) não muda dentro do loop e pode ser calculada fora
    int i = 0;
    int soma = 0;
    while (i < 10) {
        soma = soma + (b + c);
        i = i + 1;
    }
    
    // Força de operações - pode ser otimizado para a = a + 1
    a = a + 0;
    b = b * 1;
    c = c - 0;
    
    // Simplificação algébrica
    int s1 = a * 0;  // Sempre zero
    int s2 = a * 2;  // Pode ser otimizado para a + a
    
    return soma;
}
