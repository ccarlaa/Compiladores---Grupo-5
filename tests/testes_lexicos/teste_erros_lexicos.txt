// Arquivo de teste para demonstrar todos os erros léxicos possíveis
// Cada seção contém erros específicos que acionarão diferentes mensagens


int main() {
    // 1. SÍMBOLOS ESPECIAIS NÃO PERMITIDOS
    int @contador = 10;   // Símbolo @ não permitido
    int #valor = 20;     // Símbolo # não permitido
    float $preco = 30.5; // Símbolo $ não permitido
    
    // 2. SEQUÊNCIAS DE ESCAPE INVÁLIDAS
    char char1 = '\z'; // Sequência de escape \z inválida
    char char2 = '\y'; // Sequência de escape \y inválida
    char char3 = '\p'; // Sequência de escape \p inválida
    
    // 3. STRINGS NÃO FECHADAS
    printf("Esta string não tem aspas de fechamento;
    printf("Outra string sem fechamento
    
    // 4. CARACTERES NÃO FECHADOS
    char c1 = 'A;         // Falta aspas simples de fechamento
    char c2 = 'B          // Falta aspas simples de fechamento
    
    // 5. PALAVRAS-CHAVE DE LAÇOS (EM C PADRÃO) - Mantidas para contexto da intenção original
    // Uso de palavras-chave em inglês (já em C padrão), quando a intenção era em português
    while (contador > 0) {   // Na linguagem "C para Português" deveria ser 'enquanto'
        contador--;
    }
    
    for (int i = 0; i < 10; i++) {  // Na linguagem "C para Português" deveria ser 'para'
        printf("%d", i); 
    }
    
    do {                            // Na linguagem "C para Português" deveria ser 'faca'
        contador++;
    } while (contador < 20); // Na linguagem "C para Português" deveria ser 'enquanto'
    
    // 6. CARACTERES INVÁLIDOS E OPERADORES QUE SEU COMPILADOR CONSIDERA NÃO IMPLEMENTADOS
    int resultado = 10 ^ 2;   // Operador ^ (XOR bit a bit) é padrão em C, mas o contexto indica que seu compilador o considera "não implementado"
    int valor_op = 10 | 5;     // Operador | (OR bit a bit) é padrão em C, mas o contexto indica que seu compilador o considera "não implementado"
    int teste = 10 <=> 20;    // Operador <=> (spaceship) é do C++20, não é C padrão, portanto é um erro em C.
    
    return 0;
}
