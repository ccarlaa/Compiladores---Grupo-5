{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Compilador de C para Portugol","text":"<p>Bem-vindo \u00e0 documenta\u00e7\u00e3o do projeto Compilador de C para Portugol, desenvolvido na disciplina Compiladores (2025/1) da Universidade de Bras\u00edlia (UnB), sob orienta\u00e7\u00e3o do professor Sergio Freitas.</p> <p>Este compilador \u00e9 capaz de processar programas escritos em uma linguagem simplificada de C e traduz\u00ed-los para Portugol, uma linguagem algor\u00edtmica did\u00e1tica, facilitando o entendimento de fluxos de controle e estruturas de programa\u00e7\u00e3o.</p>"},{"location":"#sobre-o-projeto","title":"Sobre o Projeto","text":"<p>Este projeto foi constru\u00eddo com base nos conceitos fundamentais de constru\u00e7\u00e3o de compiladores, abordando as principais fases: an\u00e1lise l\u00e9xica, sint\u00e1tica e sem\u00e2ntica, gera\u00e7\u00e3o de \u00e1rvore sint\u00e1tica abstrata (AST), e tradu\u00e7\u00e3o para a linguagem-alvo.</p> <p>A linguagem-fonte aceita um subconjunto de C, e a sa\u00edda gerada corresponde a um equivalente funcional em Portugol. O projeto inclui tamb\u00e9m uma su\u00edte de testes automatizados para validar a robustez do compilador.</p>"},{"location":"#caracteristicas-principais","title":"Caracter\u00edsticas Principais","text":"<ul> <li>Reconhecimento de estruturas b\u00e1sicas da linguagem C:</li> <li>Declara\u00e7\u00e3o e uso de vari\u00e1veis (<code>int</code>, <code>float</code>, <code>char</code>)</li> <li>Express\u00f5es aritm\u00e9ticas e relacionais</li> <li>Condicionais (<code>if</code>, <code>else</code>)</li> <li>La\u00e7os de repeti\u00e7\u00e3o (<code>while</code>)</li> <li>Fun\u00e7\u00f5es definidas pelo usu\u00e1rio</li> <li> <p>Entrada e sa\u00edda com <code>scanf</code> e <code>printf</code></p> </li> <li> <p>Detec\u00e7\u00e3o de erros l\u00e9xicos, sint\u00e1ticos e sem\u00e2nticos</p> </li> <li>Gera\u00e7\u00e3o de \u00e1rvore sint\u00e1tica abstrata (AST)</li> <li>Tradu\u00e7\u00e3o para Portugol</li> <li>Testes automatizados via shell scripts</li> <li>Modularidade com uso de Flex, Bison e C</li> </ul>"},{"location":"#como-usar-esta-documentacao","title":"Como Usar Esta Documenta\u00e7\u00e3o","text":"<p>Esta documenta\u00e7\u00e3o est\u00e1 organizada em se\u00e7\u00f5es para facilitar a consulta conforme o objetivo do usu\u00e1rio:</p> <ul> <li>Guia do Usu\u00e1rio: explica como instalar, compilar, executar e interpretar a sa\u00edda do compilador.</li> <li>Documenta\u00e7\u00e3o T\u00e9cnica: detalha o funcionamento interno, desde a an\u00e1lise l\u00e9xica at\u00e9 a gera\u00e7\u00e3o de c\u00f3digo.</li> <li>Contribui\u00e7\u00e3o: explica como deve ser feito a contribui\u00e7\u00e3o ao projeto.</li> <li>Atas de Reuni\u00e3o: registra decis\u00f5es e alinhamentos feitos durante o semestre.</li> <li>Sprints: apresenta o hist\u00f3rico de desenvolvimento da equipe com base na metodologia Scrum.</li> <li>Refer\u00eancias: os principais materiais usados para o desenvolvimento do projeto.</li> </ul>"},{"location":"#exemplos-rapidos","title":"Exemplos R\u00e1pidos","text":""},{"location":"#compilando-e-executando-o-compilador","title":"Compilando e Executando o Compilador","text":"<p>Para compilar o compilador, acesse o diret\u00f3rio <code>compiler-source/</code> e execute:</p> <pre><code>make\n</code></pre> <p>Em seguida, utilize o execut\u00e1vel gerado para processar arquivos <code>.c</code> e gerar sua tradu\u00e7\u00e3o para Portugol:</p> <pre><code>./compilador &lt; entrada.c &gt; saida.por\n</code></pre> <p>O conte\u00fado de <code>saida.por</code> poder\u00e1 ser aberto no Portugol Studio para execu\u00e7\u00e3o e visualiza\u00e7\u00e3o do programa traduzido.</p>"},{"location":"#exemplo-de-entrada-e-saida","title":"Exemplo de Entrada e Sa\u00edda","text":"<p>Considere o seguinte arquivo <code>entrada.c</code>:</p> <pre><code>int main() {\n    float pi = 3.14;\n    char letra = 'a';\n\n    if (pi &gt; 3) {\n        return 1;\n    }\n    return 0;\n}\n</code></pre> <p>Ao executar:</p> <pre><code>./compilador &lt; entrada.c &gt; saida.por\n</code></pre> <p>A sa\u00edda <code>saida.por</code> ser\u00e1:</p> <pre><code>programa\n{\n    funcao inicio()\n    {\n        real pi = 3.14\n        caracter letra = 'a'\n\n        se (pi &gt; 3)\n        {\n            retorne 1\n        }\n        retorne 0\n    }\n}\n</code></pre> <p>Esse c\u00f3digo pode ser copiado e colado diretamente no Portugol Studio para ser executado e testado.</p>"},{"location":"#dica-visualizar-diretamente-no-terminal","title":"Dica: Visualizar diretamente no terminal","text":"<p>Se preferir visualizar a sa\u00edda traduzida diretamente no terminal, sem redirecionar para arquivo, basta executar:</p> <pre><code>./compilador &lt; entrada.c\n</code></pre> <p>O c\u00f3digo traduzido ser\u00e1 exibido no console.</p>"},{"location":"#executando-testes-automatizados","title":"Executando Testes Automatizados","text":"<p>O projeto conta com uma bateria de testes automatizados organizados em scripts localizados no diret\u00f3rio <code>compiler-source/bash/</code>.</p> <p>Esses testes cobrem diferentes aspectos do compilador, como:</p> <ul> <li>Reconhecimento de estruturas da linguagem</li> <li>Verifica\u00e7\u00e3o sem\u00e2ntica de vari\u00e1veis e tipos</li> <li>Testes negativos com entradas inv\u00e1lidas</li> <li>Tradu\u00e7\u00e3o correta de c\u00f3digos para Portugol</li> </ul>"},{"location":"#rodando-todos-os-testes","title":"Rodando todos os testes","text":"<p>Voc\u00ea pode executar todos os testes de uma s\u00f3 vez com o comando:</p> <pre><code>make test\n</code></pre> <p>O resultado de cada script ser\u00e1 exibido no terminal, com uma mensagem final indicando o sucesso ou falha geral da bateria.</p>"},{"location":"#analise-de-cobertura-da-gramatica","title":"An\u00e1lise de Cobertura da Gram\u00e1tica","text":"<p>Para obter um relat\u00f3rio da cobertura das regras da gram\u00e1tica (\u00fatil para verificar quais constru\u00e7\u00f5es foram testadas), execute:</p> <pre><code>make coverage\n</code></pre> <p>Esse comando:</p> <ul> <li>Executa todos os scripts de teste</li> <li>Captura sa\u00eddas espec\u00edficas relacionadas \u00e0 cobertura</li> <li>Salva o resultado no arquivo <code>cobertura.txt</code>, na raiz do projeto</li> </ul> <p>Voc\u00ea pode visualizar o conte\u00fado com:</p> <pre><code>cat cobertura.txt\n</code></pre> <p>Esse relat\u00f3rio \u00e9 especialmente \u00fatil durante o desenvolvimento da gram\u00e1tica no Bison, ajudando a identificar regras n\u00e3o exercitadas pelos testes.</p>"},{"location":"#limpando-arquivos-gerados","title":"Limpando arquivos gerados","text":"<p>Para remover arquivos de build e compila\u00e7\u00f5es anteriores:</p> <pre><code>make clean\n</code></pre> <p>Isso ajuda a manter o ambiente de desenvolvimento organizado e evitar conflitos de vers\u00f5es antigas.</p>"},{"location":"#membros-do-grupo","title":"Membros do Grupo","text":"Nome GitHub Carla A. C. Ribeiro @ccarlaa Clara Marcelino Ribeiro de Sousa  @clara-ribeiro Kallyne Macedo Passos @kalipassos Kauan de Torres Eiras @kauaneiras Leonardo Sobrinho de Aguiar @leonardo0o0 Jo\u00e3o Paulo Barros de Cristo @joaopb1-xps"},{"location":"contribuicao/","title":"Guia de Contribui\u00e7\u00e3o","text":"<p>Este documento descreve os padr\u00f5es e processos para contribuir com o projeto.</p>"},{"location":"contribuicao/#padrao-de-commits","title":"Padr\u00e3o de Commits","text":"<p>Seguimos o padr\u00e3o Conventional Commits. Cada commit deve seguir o formato:</p> <pre><code>&lt;tipo&gt;:&lt;escopo opcional&gt;&lt;descri\u00e7\u00e3o&gt;\n</code></pre>"},{"location":"contribuicao/#tipos-de-commits","title":"Tipos de Commits","text":"<ul> <li><code>feat</code>: Nova funcionalidade</li> <li><code>update</code>: Atualizar funcionalidade</li> <li><code>fix</code>: Corre\u00e7\u00e3o de bug</li> <li><code>docs</code>: Altera\u00e7\u00f5es na documenta\u00e7\u00e3o</li> <li><code>style</code>: Altera\u00e7\u00f5es que n\u00e3o afetam o c\u00f3digo (espa\u00e7os em branco, formata\u00e7\u00e3o, etc)</li> <li><code>refactor</code>: Refatora\u00e7\u00e3o de c\u00f3digo</li> <li><code>test</code>: Adi\u00e7\u00e3o ou corre\u00e7\u00e3o de testes</li> <li><code>chore</code>: Atualiza\u00e7\u00f5es de build, configura\u00e7\u00f5es, etc</li> </ul>"},{"location":"contribuicao/#exemplos","title":"Exemplos","text":"<pre><code>feat(lexer): adiciona suporte a n\u00fameros decimais\nfix(parser): corrige preced\u00eancia de operadores\ndocs(readme): atualiza instru\u00e7\u00f5es de instala\u00e7\u00e3o\nstyle(ast): formata c\u00f3digo seguindo padr\u00e3o do projeto\nrefactor(codegen): melhora gera\u00e7\u00e3o de c\u00f3digo assembly\ntest(optimizer): adiciona testes para dead code elimination\nchore(docker): atualiza vers\u00e3o do ubuntu no Dockerfile\n</code></pre>"},{"location":"contribuicao/#padrao-de-branches","title":"Padr\u00e3o de Branches","text":""},{"location":"contribuicao/#nomenclatura","title":"Nomenclatura","text":"<ul> <li><code>main</code>: Branch principal do projeto</li> <li><code>feat/*</code>: Novas funcionalidades</li> <li><code>fix/*</code>: Corre\u00e7\u00f5es de bugs</li> </ul>"},{"location":"contribuicao/#exemplos_1","title":"Exemplos","text":"<pre><code>feat/add-floating-point\nfix/parser-memory-leak\n</code></pre>"},{"location":"contribuicao/#processo-de-pull-request","title":"Processo de Pull Request","text":"<ol> <li> <p>Criar Branch <pre><code>git checkout -b feat/nome-da-feature\n</code></pre></p> </li> <li> <p>Desenvolver</p> </li> <li>Fa\u00e7a commits seguindo o padr\u00e3o</li> <li>Mantenha commits pequenos e focados</li> <li> <p>Atualize a documenta\u00e7\u00e3o quando necess\u00e1rio</p> </li> <li> <p>Testar <pre><code>make clean\nmake\nmake test\n</code></pre></p> </li> <li> <p>Atualizar Branch <pre><code>git fetch origin\ngit rebase origin/develop\n</code></pre></p> </li> <li> <p>Criar Pull Request</p> </li> <li>T\u00edtulo: Use o mesmo padr\u00e3o dos commits</li> <li>Descri\u00e7\u00e3o: Detalhe as mudan\u00e7as e seu impacto</li> <li>Checklist:<ul> <li>[ ] C\u00f3digo segue os padr\u00f5es do projeto</li> <li>[ ] Testes foram adicionados/atualizados</li> <li>[ ] Documenta\u00e7\u00e3o foi atualizada</li> <li>[ ] Build passa sem erros</li> <li>[ ] Testes passam</li> </ul> </li> </ol>"},{"location":"atas-reuniao/","title":"Atas de Reuni\u00e3o","text":"<p>Esta se\u00e7\u00e3o cont\u00e9m as atas das reuni\u00f5es realizadas pela equipe durante o desenvolvimento do projeto do Compilador C em Portugu\u00eas.</p>"},{"location":"atas-reuniao/#estrutura-das-atas","title":"Estrutura das Atas","text":"<p>Cada ata de reuni\u00e3o cont\u00e9m as seguintes informa\u00e7\u00f5es:</p> <ul> <li>Data e Hora: Quando a reuni\u00e3o ocorreu</li> <li>Participantes: Membros da equipe presentes</li> <li>Pauta: T\u00f3picos discutidos</li> <li>Decis\u00f5es: Decis\u00f5es tomadas durante a reuni\u00e3o</li> <li>Tarefas: Tarefas atribu\u00eddas aos membros da equipe</li> <li>Pr\u00f3xima Reuni\u00e3o: Data e pauta da pr\u00f3xima reuni\u00e3o</li> </ul>"},{"location":"atas-reuniao/#lista-de-reunioes","title":"Lista de Reuni\u00f5es","text":"<ul> <li>Reuni\u00e3o 1 - Planejamento Inicial - 13/04/2025</li> <li>Reuni\u00e3o 2 - An\u00e1lise L\u00e9xica e Sint\u00e1tica - 20/04/2025</li> <li>Reuni\u00e3o 3 - An\u00e1lise Sint\u00e1tica e Sem\u00e2ntica - 07/05/2025</li> <li>Reuni\u00e3o 4 - An\u00e1lise Sem\u00e2ntica e C\u00f3digo Intermedi\u00e1rio - 12/05/2025</li> <li>Reuni\u00e3o 5 - Altera\u00e7\u00f5es de Escopo - 04/06/2025</li> <li>Reuni\u00e3o 6 - Finaliza\u00e7\u00f5es - 20/06/2025 </li> </ul>"},{"location":"atas-reuniao/reuniao-01/","title":"Reuni\u00e3o 1 - Planejamento Inicial","text":"<p>Data e Hora: 13/04/2025, 20:00  Local: Google Meets  Participantes: Todos os membros do Grupo 5</p>"},{"location":"atas-reuniao/reuniao-01/#pauta","title":"Pauta","text":"<ol> <li>Apresenta\u00e7\u00e3o do projeto de compilador C em portugu\u00eas</li> <li>Defini\u00e7\u00e3o do escopo inicial</li> <li>Divis\u00e3o de tarefas</li> <li>Cronograma de desenvolvimento</li> </ol>"},{"location":"atas-reuniao/reuniao-01/#discussoes-e-decisoes","title":"Discuss\u00f5es e Decis\u00f5es","text":""},{"location":"atas-reuniao/reuniao-01/#1-apresentacao-do-projeto","title":"1. Apresenta\u00e7\u00e3o do Projeto","text":"<p>O projeto consiste em desenvolver um compilador para a linguagem C com palavras-chave traduzidas para portugu\u00eas. O objetivo \u00e9 criar uma ferramenta que facilite o aprendizado de programa\u00e7\u00e3o para falantes de portugu\u00eas, mantendo a compatibilidade com a sintaxe e sem\u00e2ntica da linguagem C.</p>"},{"location":"atas-reuniao/reuniao-01/#2-escopo-inicial","title":"2. Escopo Inicial","text":"<p>Decidimos implementar o compilador em fases:</p> <ul> <li>Fase 1: Analisador l\u00e9xico (reconhecimento de tokens)</li> <li>Fase 2: Analisador sint\u00e1tico (gram\u00e1tica b\u00e1sica)</li> <li>Fase 3: Expans\u00e3o da gram\u00e1tica (estruturas, fun\u00e7\u00f5es, etc.)</li> <li>Fase 4: Testes e corre\u00e7\u00f5es</li> <li>Fase 5: Documenta\u00e7\u00e3o e finaliza\u00e7\u00e3o</li> </ul> <p>Para a primeira vers\u00e3o, decidimos focar nas seguintes funcionalidades: - Tipos b\u00e1sicos (inteiro, real, caractere, etc.) - Estruturas de controle (se, senao, enquanto, para) - Declara\u00e7\u00f5es de vari\u00e1veis e fun\u00e7\u00f5es - Fun\u00e7\u00e3o principal (equivalente \u00e0 main)</p>"},{"location":"atas-reuniao/reuniao-01/#3-divisao-de-tarefas","title":"3. Divis\u00e3o de Tarefas","text":"<p>Ficou acordado que na primeira semana o grupo ir\u00e1 desenvolver o analisador l\u00e9xico, dividido da seguinte forma:</p> <ul> <li>Carla: Tipos de vari\u00e1veis (lexico_variavel.l)</li> <li>Kauan: La\u00e7os de repeti\u00e7\u00e3o (lexico_lacos.l)</li> <li>Kallyne: Condicionais (lexico_condicionais.l)</li> <li>Leonardo: Switch Case (lexico_switchcase.l)</li> <li>Jo\u00e3o: Operadores (lexico_operadores.l)</li> <li>Clara: Pontua\u00e7\u00e3o e Coment\u00e1rios (lexico_pontuacao.l)</li> </ul> <p>Na segunda semana, o grupo ir\u00e1 focar no desenvolvimento do analisador sint\u00e1tico (parser.y), integrando os componentes do analisador l\u00e9xico desenvolvidos na primeira semana.</p>"},{"location":"atas-reuniao/reuniao-01/#4-cronograma","title":"4. Cronograma","text":"<ul> <li>Semana 1: Desenvolvimento do analisador l\u00e9xico (dividido entre os membros conforme especificado acima)</li> <li>Semana 2: Implementa\u00e7\u00e3o do analisador sint\u00e1tico, expans\u00e3o da gram\u00e1tica, testes e corre\u00e7\u00f5es</li> <li>Semana 3: Atualiza\u00e7\u00e3o da documenta\u00e7\u00e3o e prepara\u00e7\u00e3o para apresenta\u00e7\u00e3o</li> </ul>"},{"location":"atas-reuniao/reuniao-01/#tarefas-atribuidas","title":"Tarefas Atribu\u00eddas","text":"<ol> <li>Todos os membros: Estudar a documenta\u00e7\u00e3o do Flex e Bison</li> <li>Carla: Implementar o reconhecimento de tipos de vari\u00e1veis no analisador l\u00e9xico</li> <li>Kauan: Implementar o reconhecimento de la\u00e7os de repeti\u00e7\u00e3o no analisador l\u00e9xico</li> <li>Kallyne: Implementar o reconhecimento de condicionais no analisador l\u00e9xico</li> <li>Leonardo: Implementar o reconhecimento de switch case no analisador l\u00e9xico</li> <li>Jo\u00e3o: Implementar o reconhecimento de operadores no analisador l\u00e9xico</li> <li>Clara: Implementar o reconhecimento de pontua\u00e7\u00e3o e coment\u00e1rios no analisador l\u00e9xico</li> <li>Todos os membros: Preparar a estrutura do projeto e ambiente de desenvolvimento</li> </ol>"},{"location":"atas-reuniao/reuniao-01/#proxima-reuniao","title":"Pr\u00f3xima Reuni\u00e3o","text":"<p>A pr\u00f3xima reuni\u00e3o ficou agendada para o domingo seguinte (20/04/25), com o objetivo de acompanhar a evolu\u00e7\u00e3o das tarefas.</p>"},{"location":"atas-reuniao/reuniao-02/","title":"Reuni\u00e3o 2 - An\u00e1lise L\u00e9xica e Sint\u00e1tica","text":"<p>Data e Hora: 24/03/2025, 21:00  Local: Sala de Reuni\u00f5es Virtual Participantes: Todos os membros do Grupo 5</p>"},{"location":"atas-reuniao/reuniao-02/#pauta","title":"Pauta","text":"<ol> <li>Checkpoint do avan\u00e7o da an\u00e1lise l\u00e9xica</li> <li>Divis\u00e3o da cria\u00e7\u00e3o de testes e da an\u00e1lise sint\u00e1tica</li> <li>Cronograma de desenvolvimento</li> </ol>"},{"location":"atas-reuniao/reuniao-02/#discussoes-e-decisoes","title":"Discuss\u00f5es e Decis\u00f5es","text":"<p>Mantendo a decis\u00e3o de seguir um escopo em fases para a implementa\u00e7\u00e3o do compilador, foi discutido entre o grupo o que j\u00e1 havia sido acordado para o desenvolvimento da an\u00e1lise l\u00e9xica, de maneira a identificar o que j\u00e1 havia sido feito e o que faltava ser implementado conforme os principais tipos de dados que precisariam compor a lista de tokens e assim avan\u00e7ar para a an\u00e1lise sint\u00e1tica.</p>"},{"location":"atas-reuniao/reuniao-02/#divisao-de-tarefas","title":"Divis\u00e3o de Tarefas","text":"<p>Foi definido que a an\u00e1lise sint\u00e1tica e a implementa\u00e7\u00e3o dos testes seria realizada seguindo a mesma divis\u00e3o de cada parte do analisador l\u00e9xico:</p> <ul> <li>Carla: Tipos de vari\u00e1veis (lexico_variavel.l, )</li> <li>Kauan: La\u00e7os de repeti\u00e7\u00e3o (lexico_lacos.l)</li> <li>Kallyne: Condicionais (lexico_condicionais.l)</li> <li>Leonardo: Switch Case (lexico_switchcase.l)</li> <li>Jo\u00e3o: Operadores (lexico_operadores.l)</li> <li>Clara: Pontua\u00e7\u00e3o e Coment\u00e1rios (lexico_pontuacao.l) </li> </ul> <p>A an\u00e1lise sint\u00e1tica passou a ser prevista para a pr\u00f3xima semana para que todos terminassem suas tarefas do analisador l\u00e9xico. </p>"},{"location":"atas-reuniao/reuniao-02/#4-cronograma","title":"4. Cronograma","text":"<ul> <li>Semana 2: Finaliza\u00e7\u00e3o do analisador l\u00e9xico (dividido entre os membros conforme especificado acima), adi\u00e7\u00e3o de testes e implementa\u00e7\u00e3o do analisador sint\u00e1tico</li> <li>Semana 3: Evolu\u00e7\u00e3o do analisador sint\u00e1tico, expans\u00e3o da gram\u00e1tica, testes e corre\u00e7\u00f5es, atualiza\u00e7\u00e3o da documenta\u00e7\u00e3o e prepara\u00e7\u00e3o para apresenta\u00e7\u00e3o.</li> </ul>"},{"location":"atas-reuniao/reuniao-02/#tarefas-atribuidas","title":"Tarefas Atribu\u00eddas","text":"<ol> <li>Todos os membros: Seguir com os estudos do Flex e Bison</li> <li>Carla: Finalizar a implementa\u00e7\u00e3o e testar tipos de vari\u00e1veis no analisador l\u00e9xico e sint\u00e1tico</li> <li>Kauan: Finalizar a implementa\u00e7\u00e3o e testar la\u00e7os de repeti\u00e7\u00e3o no analisador l\u00e9xico  e sint\u00e1tico</li> <li>Kallyne: Finalizar a implementa\u00e7\u00e3o e testar condicionais no analisador l\u00e9xico e sint\u00e1tico</li> <li>Leonardo: Finalizar a implementa\u00e7\u00e3o e testar switch case no analisador l\u00e9xico e sint\u00e1tico</li> <li>Jo\u00e3o: Finalizar a implementa\u00e7\u00e3o e testar operadores no analisador l\u00e9xico e sint\u00e1tico</li> <li>Clara: Finalizar a implementa\u00e7\u00e3o e testar pontua\u00e7\u00e3o e coment\u00e1rios no analisador l\u00e9xico e sint\u00e1tico</li> <li>Todos os membros: Evoluir a estrutura do projeto.</li> </ol>"},{"location":"atas-reuniao/reuniao-02/#proxima-reuniao","title":"Pr\u00f3xima Reuni\u00e3o","text":"<p>A pr\u00f3xima reuni\u00e3o ficou sem data agendada, no aguardo do avan\u00e7os dos conte\u00fados nas aulas para que fosse poss\u00edvel discutir os pr\u00f3ximos passos. </p>"},{"location":"atas-reuniao/reuniao-03/","title":"Reuni\u00e3o 3 - An\u00e1lise Sint\u00e1tica e Sem\u00e2ntica","text":"<p>Data e Hora: 07/05/2025, 20:00  Local: Google Meets  Participantes: Todos os membros do Grupo 5</p>"},{"location":"atas-reuniao/reuniao-03/#pauta","title":"Pauta","text":"<ol> <li>Checkpoint do avan\u00e7o da an\u00e1lise sint\u00e1tica</li> <li>Programa\u00e7\u00e3o para desenvolver a an\u00e1lise sem\u00e2ntica, tabela de s\u00edmbolos e AST.</li> <li>Cronograma de desenvolvimento</li> </ol>"},{"location":"atas-reuniao/reuniao-03/#discussoes-e-decisoes","title":"Discuss\u00f5es e Decis\u00f5es","text":"<p>Foi discutido entre o grupo os d\u00e9bitos t\u00e9cnicos da an\u00e1lise sint\u00e1tica e corre\u00e7\u00f5es que precisariam ser realizadas p\u00f3s primeiro ponto de controle para podermos avan\u00e7ar para a an\u00e1lise sem\u00e2ntica e como deveriam ser implementadas a tabela de s\u00edmbolos e \u00e1rvore de sintaxe abstrata (AST).</p>"},{"location":"atas-reuniao/reuniao-03/#4-cronograma","title":"4. Cronograma","text":"<ul> <li>Semana 4: Come\u00e7o do analisador sem\u00e2ntico, estudo da implementa\u00e7\u00e3o da tabela de s\u00edmbolos e da \u00e1rvore de sintaxe abstrata (AST).</li> </ul>"},{"location":"atas-reuniao/reuniao-03/#tarefas-atribuidas","title":"Tarefas Atribu\u00eddas","text":"<ol> <li>Todos os membros: Revis\u00e3o do l\u00e9xico e estudo da an\u00e1lise sem\u00e2ntica.</li> <li>Carla: In\u00edcio da tabela de s\u00edmbolos e pequenas corre\u00e7\u00f5es da an\u00e1lise l\u00e9xica.</li> <li>Kauan: In\u00edcio da an\u00e1lise sem\u00e2ntica.</li> <li>Kallyne: In\u00edcio da an\u00e1lise sem\u00e2ntica.</li> <li>Leonardo: In\u00edcio da an\u00e1lise sem\u00e2ntica.</li> <li>Jo\u00e3o: In\u00edcio da AST.</li> <li>Clara: In\u00edcio da AST e da tabela de s\u00edmbolos.</li> </ol>"},{"location":"atas-reuniao/reuniao-03/#proxima-reuniao","title":"Pr\u00f3xima Reuni\u00e3o","text":"<p>A pr\u00f3xima reuni\u00e3o ficou sem data agendada, no aguardo do avan\u00e7o dos membros.</p>"},{"location":"atas-reuniao/reuniao-04/","title":"Reuni\u00e3o 2 - An\u00e1lise Sem\u00e2ntica e C\u00f3digo Intermedi\u00e1rio","text":"<p>Data e Hora: 12/05/2025, 21:00  Local: Google Meets  Participantes: Todos os membros do Grupo 5</p>"},{"location":"atas-reuniao/reuniao-04/#pauta","title":"Pauta","text":"<ol> <li>Checkpoint da an\u00e1lise sem\u00e2ntica</li> <li>Tratativa da cria\u00e7\u00e3o de um c\u00f3digo intermedi\u00e1rio e an\u00e1lise de erros</li> <li>Divis\u00e3o de tarefas</li> <li>Cronograma de desenvolvimento</li> </ol>"},{"location":"atas-reuniao/reuniao-04/#discussoes-e-decisoes","title":"Discuss\u00f5es e Decis\u00f5es","text":"<p>Durante a reuni\u00e3o, foi avaliado se existia d\u00e9bito t\u00e9cnico na an\u00e1lise sem\u00e2ntica e como isso afetaria os pr\u00f3ximos passos, que foram decididos de serem realizados em duplas. Assim, foi programada a adi\u00e7\u00e3o da an\u00e1lise de erros no c\u00f3digo e a gera\u00e7\u00e3o do c\u00f3digo intermedi\u00e1rio. Como houve o entendimento de que as atividades dependiam umas das outras, foi priorizada a finaliza\u00e7\u00e3o da an\u00e1lise sem\u00e2ntica para seguir para a verifica\u00e7\u00e3o de erros e gera\u00e7\u00e3o de c\u00f3digo intermedi\u00e1rio (TAC). </p>"},{"location":"atas-reuniao/reuniao-04/#4-cronograma","title":"4. Cronograma","text":"<ul> <li>Semana 5: Finaliza\u00e7\u00e3o do analisador sem\u00e2ntico</li> <li>Semana 6: Verifica\u00e7\u00e3o e cria\u00e7\u00e3o de mensagens de erros; gera\u00e7\u00e3o de c\u00f3digo intermedi\u00e1rio </li> </ul>"},{"location":"atas-reuniao/reuniao-04/#tarefas-atribuidas","title":"Tarefas Atribu\u00eddas","text":"<ol> <li>Carla: Verifica\u00e7\u00e3o e cria\u00e7\u00e3o de mensagens de erros</li> <li>Kauan: Gerar c\u00f3digo intermedi\u00e1rio</li> <li>Kallyne: Verifica\u00e7\u00e3o e cria\u00e7\u00e3o de mensagens de erros</li> <li>Leonardo:  Gerar c\u00f3digo intermedi\u00e1rio</li> <li>Jo\u00e3o: Finalizar a implementa\u00e7\u00e3o da an\u00e1lise sem\u00e2ntica</li> <li>Clara: Finalizar a implementa\u00e7\u00e3o da an\u00e1lise sem\u00e2ntica</li> <li>Todos os membros: Revis\u00e3o de pull requests.</li> </ol>"},{"location":"atas-reuniao/reuniao-04/#proxima-reuniao","title":"Pr\u00f3xima Reuni\u00e3o","text":"<p>A pr\u00f3xima reuni\u00e3o ficou sem data agendada, no aguardo do avan\u00e7os dos conte\u00fados nas aulas para que fosse poss\u00edvel discutir os pr\u00f3ximos passos. </p>"},{"location":"atas-reuniao/reuniao-05/","title":"Reuni\u00e3o 5 - Altera\u00e7\u00f5es de Escopo","text":"<p>Data e Hora: 04/06/2025, 21:00  Local: Google Meets  Participantes: Todos os membros do Grupo 5</p>"},{"location":"atas-reuniao/reuniao-05/#pauta","title":"Pauta","text":"<ol> <li>Redefini\u00e7\u00e3o de escopo.</li> <li>Corre\u00e7\u00f5es a serem feitas no compilador devido ao novo escopo.</li> <li>Cronograma de desenvolvimento</li> </ol>"},{"location":"atas-reuniao/reuniao-05/#discussoes-e-decisoes","title":"Discuss\u00f5es e Decis\u00f5es","text":"<p>Durante a reuni\u00e3o, foi discutida a mudan\u00e7a de escopo no objetivo do compilador, que antes buscava compilar de C para portugu\u00eas simples e depois foi decidido compilar de C para o Portugol estruturado, aceito pelo Portugol Studi. Para evitar problemas que n\u00e3o tinham sido considerados anteriormente, por conta dos desafios de compila\u00e7\u00e3o da linguagem C para Portugol, foi decidida tamb\u00e9m a simplifica\u00e7\u00e3o de processos do compilador. Al\u00e9m disso, foi definida a vers\u00e3o do C que seria traduzida e a vers\u00e3o de Portugol que seria gerada.</p>"},{"location":"atas-reuniao/reuniao-05/#4-cronograma","title":"4. Cronograma","text":"<ul> <li>Semana 7: Corre\u00e7\u00f5es de erros relacionadas \u00e0 mudan\u00e7a de escopo.</li> <li>Semana 8: Adapta\u00e7\u00f5es da \u00e1rvore de sintaxe abstrata (AST) e da tabela de s\u00edmbolos para se adequarem \u00e0s mudan\u00e7as feitas no compilador.</li> </ul>"},{"location":"atas-reuniao/reuniao-05/#tarefas-atribuidas","title":"Tarefas Atribu\u00eddas","text":"<ol> <li>Todos os membros: Corre\u00e7\u00e3o do c\u00f3digo para se adequar ao novo escopo.</li> </ol>"},{"location":"atas-reuniao/reuniao-05/#proxima-reuniao","title":"Pr\u00f3xima Reuni\u00e3o","text":"<p>N\u00e3o foi definida uma data para a reuni\u00e3o seguinte.</p>"},{"location":"atas-reuniao/reuniao-06/","title":"Reuni\u00e3o 6 - Finaliza\u00e7\u00f5es","text":"<p>Data e Hora: 20/06/2025, 20:00 Local: Google Meets  Participantes: Todos os membros do Grupo 5</p>"},{"location":"atas-reuniao/reuniao-06/#pauta","title":"Pauta","text":"<ol> <li>Finaliza\u00e7\u00e3o da documenta\u00e7\u00e3o.</li> <li>Atualiza\u00e7\u00f5es no parser e na tabela de s\u00edmbolos.</li> <li>Gera\u00e7\u00e3o do c\u00f3digo final.</li> </ol>"},{"location":"atas-reuniao/reuniao-06/#discussoes-e-decisoes","title":"Discuss\u00f5es e Decis\u00f5es","text":"<p>Foram levantadas as pend\u00eancias do projeto para que a entrega final fosse realizada com sucesso.</p>"},{"location":"atas-reuniao/reuniao-06/#cronograma","title":"Cronograma","text":"<ul> <li>Semana 8: Adapta\u00e7\u00f5es da \u00e1rvore de sintaxe abstrata (AST) e da tabela de s\u00edmbolos para se adequarem \u00e0s mudan\u00e7as feitas no compilador.</li> <li>Semana 9: Corre\u00e7\u00f5es finais, documenta\u00e7\u00e3o e gera\u00e7\u00e3o do c\u00f3digo final.</li> </ul>"},{"location":"atas-reuniao/reuniao-06/#tarefas-atribuidas","title":"Tarefas Atribu\u00eddas","text":"<ol> <li>Todos os membros: Revisar o c\u00f3digo e procurar por pend\u00eancias finais.</li> <li>Carla: Escopo da tabela de s\u00edmbolos.</li> <li>Kauan: Remo\u00e7\u00e3o de warnings e gera\u00e7\u00e3o do c\u00f3digo final.</li> <li>Kallyne: Fun\u00e7\u00f5es aceitarem par\u00e2metros, chamadas de fun\u00e7\u00e3o, retornos de fun\u00e7\u00f5es e aceita\u00e7\u00e3o de argumentos no printf.</li> <li>Leonardo: Fun\u00e7\u00f5es aceitarem par\u00e2metros, chamadas de fun\u00e7\u00e3o, retornos de fun\u00e7\u00f5es e aceita\u00e7\u00e3o de argumentos no printf.</li> <li>Jo\u00e3o: Verifica\u00e7\u00e3o de escopo.</li> <li>Clara: Documenta\u00e7\u00e3o.</li> </ol>"},{"location":"documentacao-tecnica/analise-lexica/","title":"An\u00e1lise L\u00e9xica","text":"<p>Esta se\u00e7\u00e3o documenta o funcionamento do analisador l\u00e9xico (<code>lexer.l</code>), desenvolvido com Flex. O lexer \u00e9 respons\u00e1vel por transformar a entrada textual do programa (em C) em uma sequ\u00eancia de tokens que ser\u00e3o processados pelo parser Bison.</p>"},{"location":"documentacao-tecnica/analise-lexica/#objetivo","title":"Objetivo","text":"<p>O analisador l\u00e9xico atua como a primeira etapa do processo de compila\u00e7\u00e3o. Seu objetivo \u00e9:</p> <ul> <li>Eliminar elementos irrelevantes como espa\u00e7os e coment\u00e1rios</li> <li>Identificar tokens v\u00e1lidos (palavras-chave, identificadores, operadores, literais)</li> <li>Realizar atribui\u00e7\u00f5es iniciais de valores sem\u00e2nticos \u00e0 vari\u00e1vel <code>yylval</code></li> <li>Encaminhar os tokens corretamente para o parser</li> </ul>"},{"location":"documentacao-tecnica/analise-lexica/#organizacao-do-arquivo-lexerl","title":"Organiza\u00e7\u00e3o do Arquivo <code>lexer.l</code>","text":"<p>O arquivo \u00e9 dividido em tr\u00eas se\u00e7\u00f5es principais, conforme a estrutura padr\u00e3o do Flex.</p>"},{"location":"documentacao-tecnica/analise-lexica/#1-cabecalhos-e-codigo-c","title":"1. Cabe\u00e7alhos e C\u00f3digo C (<code>%{ ... %}</code>)","text":"<p>Nesta parte s\u00e3o inclu\u00eddas bibliotecas e fun\u00e7\u00f5es auxiliares utilizadas nas a\u00e7\u00f5es l\u00e9xicas:</p> <pre><code>#include \"y.tab.h\"\n#include \"ast.h\"\n#include &lt;string.h&gt;\n</code></pre> <p>A fun\u00e7\u00e3o auxiliar <code>dupstr()</code> \u00e9 definida para duplicar strings de forma segura:</p> <pre><code>char* dupstr(const char* s) {\n    char* ret = strdup(s);\n    if (!ret) {\n        perror(\"strdup\");\n        exit(1);\n    }\n    return ret;\n}\n</code></pre>"},{"location":"documentacao-tecnica/analise-lexica/#2-opcoes-e-definicoes-option-e-macros","title":"2. Op\u00e7\u00f5es e Defini\u00e7\u00f5es (<code>%option</code> e macros)","text":"<p>As diretivas do Flex configuram o comportamento do lexer:</p> <pre><code>%option noyywrap nounput noinput\n%option yylineno\n</code></pre> <ul> <li><code>noyywrap</code>: evita necessidade de fun\u00e7\u00e3o <code>yywrap()</code></li> <li><code>nounput</code> e <code>noinput</code>: desabilitam fun\u00e7\u00f5es n\u00e3o usadas</li> <li><code>yylineno</code>: ativa a contagem autom\u00e1tica de linhas</li> </ul> <p>Al\u00e9m disso, definem-se express\u00f5es regulares reutiliz\u00e1veis:</p> <pre><code>DIGITO              [0-9]\nLETRA               [a-zA-Z_]\nIDENTIFICADOR       {LETRA}({LETRA}|{DIGITO})*\nNUMERO_INTEIRO      {DIGITO}+\nNUMERO_REAL         {DIGITO}+\\.{DIGITO}+\nTEXTO               \\\"(\\\\.|[^\"\\\\])\\*\\\"\nCARACTERE           \\'(.|\\\\.)\\'\n</code></pre>"},{"location":"documentacao-tecnica/analise-lexica/#3-regras-lexicas-corpo-entre","title":"3. Regras L\u00e9xicas (corpo entre <code>%%</code>)","text":"<p>A terceira se\u00e7\u00e3o cont\u00e9m as regras de tokeniza\u00e7\u00e3o. Cada linha tem a forma:</p> <pre><code>Padr\u00e3o    { A\u00e7\u00e3o a executar }\n</code></pre>"},{"location":"documentacao-tecnica/analise-lexica/#ignorados","title":"Ignorados:","text":"<pre><code>\"//\".*                             ; // Coment\u00e1rios de linha\n\"/*\"([^*]|\"*\"+[^*/])*\"*\"+\"/\"      ; // Coment\u00e1rios de bloco\n[   \n\n]+                        ; // Espa\u00e7os e quebras de linha\n^#.*                              ; // Diretivas como #include\n</code></pre>"},{"location":"documentacao-tecnica/analise-lexica/#palavras-chave","title":"Palavras-chave:","text":"<pre><code>\"if\"       { return T_IF; }\n\"else\"     { return T_ELSE; }\n\"while\"    { return T_WHILE; }\n\"return\"   { return T_RETURN; }\n\"printf\"   { return T_PRINTF; }\n\"scanf\"    { return T_SCANF; }\n</code></pre>"},{"location":"documentacao-tecnica/analise-lexica/#literais","title":"Literais:","text":"<pre><code>{NUMERO_INTEIRO}  { yylval.ival = atoi(yytext); return T_INT; }\n{NUMERO_REAL}     { yylval.rval = atof(yytext); return T_FLOAT; }\n{TEXTO}           { yylval.str = dupstr(yytext); return T_STRING; }\n{CARACTERE}       { yylval.cval = yytext[1]; return T_CHAR; }\n</code></pre>"},{"location":"documentacao-tecnica/analise-lexica/#identificadores","title":"Identificadores:","text":"<pre><code>{IDENTIFICADOR}   { yylval.str = dupstr(yytext); return T_ID; }\n</code></pre>"},{"location":"documentacao-tecnica/analise-lexica/#operadores-e-delimitadores","title":"Operadores e Delimitadores:","text":"<pre><code>\"=\"      { return T_EQ; }\n\"==\"     { return T_EQEQ; }\n\"+\"      { return T_PLUS; }\n\"-\"      { return T_MINUS; }\n\"*\"      { return T_TIMES; }\n\"/\"      { return T_DIVIDE; }\n\"(\"      { return T_LPAREN; }\n\")\"      { return T_RPAREN; }\n\"{\"      { return T_LBRACE; }\n\"}\"      { return T_RBRACE; }\n\";\"      { return T_SEMICOLON; }\n\",\"      { return T_COMMA; }\n</code></pre>"},{"location":"documentacao-tecnica/analise-lexica/#tratamento-de-erros","title":"Tratamento de Erros","text":"<p>O lexer ignora coment\u00e1rios malformados ou espa\u00e7os inv\u00e1lidos, mas pode ser estendido para exibir mensagens de erro personalizadas com base em <code>yytext</code> e <code>yylineno</code>.</p>"},{"location":"documentacao-tecnica/analise-lexica/#tokens-e-yylval","title":"Tokens e <code>yylval</code>","text":"<p>Cada token identificado pode atribuir um valor \u00e0 <code>yylval</code>, que ser\u00e1 utilizado na an\u00e1lise sint\u00e1tica. Exemplo:</p> <pre><code>yylval.ival = atoi(yytext); // para inteiros\nyylval.str = dupstr(yytext); // para strings e identificadores\n</code></pre>"},{"location":"documentacao-tecnica/analise-lexica/#exemplo-de-entrada-e-saida","title":"Exemplo de Entrada e Sa\u00edda","text":"<p>Entrada:</p> <pre><code>int main() {\n    float pi = 3.14;\n    return 0;\n}\n</code></pre> <p>Tokens gerados:</p> <ul> <li><code>T_INT</code> (<code>int</code>)</li> <li><code>T_ID</code> (<code>main</code>)</li> <li><code>T_LPAREN</code>, <code>T_RPAREN</code>, <code>T_LBRACE</code></li> <li><code>T_FLOAT</code> (<code>float</code>)</li> <li><code>T_ID</code> (<code>pi</code>)</li> <li><code>T_EQ</code>, <code>T_REAL_LITERAL</code> (<code>3.14</code>)</li> <li><code>T_SEMICOLON</code></li> <li><code>T_RETURN</code>, <code>T_INT_LITERAL</code> (<code>0</code>)</li> <li><code>T_SEMICOLON</code>, <code>T_RBRACE</code></li> </ul>"},{"location":"documentacao-tecnica/analise-lexica/#integracao-com-o-parser","title":"Integra\u00e7\u00e3o com o Parser","text":"<p>A fun\u00e7\u00e3o <code>yylex()</code> \u00e9 chamada automaticamente pelo Bison para buscar o pr\u00f3ximo token. O arquivo <code>parser.y</code> define os tokens esperados com <code>%token</code>, garantindo compatibilidade entre lexer e parser.</p>"},{"location":"documentacao-tecnica/analise-sintatica/","title":"An\u00e1lise Sint\u00e1tica","text":"<p>Esta se\u00e7\u00e3o documenta a implementa\u00e7\u00e3o do analisador sint\u00e1tico definido no arquivo <code>parser.y</code>. O parser utiliza Bison, um gerador de analisadores descendentes para gram\u00e1ticas livres de contexto. Ele valida a estrutura do c\u00f3digo reconhecido pelo analisador l\u00e9xico (<code>lexer.l</code>), constr\u00f3i a \u00c1rvore Sint\u00e1tica Abstrata (AST) e realiza verifica\u00e7\u00f5es de sem\u00e2ntica.</p>"},{"location":"documentacao-tecnica/analise-sintatica/#objetivo","title":"Objetivo","text":"<ul> <li>Validar a estrutura sint\u00e1tica do programa segundo uma gram\u00e1tica definida</li> <li>Construir a AST de maneira incremental</li> <li>Preparar os dados para a verifica\u00e7\u00e3o sem\u00e2ntica e tradu\u00e7\u00e3o</li> </ul>"},{"location":"documentacao-tecnica/analise-sintatica/#estrategia-de-parsing-utilizada","title":"Estrat\u00e9gia de Parsing Utilizada","text":"<p>O compilador utiliza a estrat\u00e9gia LR (Left-to-Right), por meio da ferramenta Bison, que gera um parser ascendente com base em uma gram\u00e1tica livre de contexto.</p>"},{"location":"documentacao-tecnica/analise-sintatica/#por-que-lr","title":"Por que LR?","text":"<p>O LR \u00e9 adequado para esse projeto por atender aos seguintes crit\u00e9rios:</p> <ul> <li>Poder gramatical: \u00e9 capaz de reconhecer uma classe maior de gram\u00e1ticas do que LL (por exemplo, suporta recurs\u00e3o \u00e0 esquerda), o que permite escrever regras mais pr\u00f3ximas da linguagem C.</li> <li>Simplicidade de uso com Bison: o Bison j\u00e1 fornece a infraestrutura pronta para gera\u00e7\u00e3o de parsers LR, com tratamento autom\u00e1tico de conflitos comuns e suporte a preced\u00eancia de operadores.</li> <li>Precis\u00e3o e robustez: o parser LR detecta erros de forma mais precisa e oferece mensagens melhores do que parsers simples LL ou ad-hoc.</li> <li>Integra\u00e7\u00e3o com a\u00e7\u00f5es sem\u00e2nticas: o modelo de parser ascendente se encaixa bem com a constru\u00e7\u00e3o da AST a partir das folhas para a raiz, refletindo naturalmente a sem\u00e2ntica de linguagens imperativas.</li> </ul>"},{"location":"documentacao-tecnica/analise-sintatica/#comparacao-com-outras-estrategias","title":"Compara\u00e7\u00e3o com outras estrat\u00e9gias","text":"Estrat\u00e9gia Caracter\u00edsticas Por que n\u00e3o foi usada? LL Parser descendente, f\u00e1cil de depurar, mais restrito (n\u00e3o suporta recurs\u00e3o \u00e0 esquerda) Exigiria reescrever a gram\u00e1tica em formato n\u00e3o natural para C GLR Suporta ambiguidade e m\u00faltiplos caminhos, mais poderoso Complexidade maior e desnecess\u00e1ria para o escopo da linguagem implementada <p>A escolha por um parser LR via Bison oferece um bom equil\u00edbrio entre pot\u00eancia, suporte a gram\u00e1ticas realistas, e integra\u00e7\u00e3o com an\u00e1lise sem\u00e2ntica e gera\u00e7\u00e3o de c\u00f3digo, sendo a abordagem mais adequada para um compilador educacional que visa cobrir um subconjunto significativo da linguagem C.</p>"},{"location":"documentacao-tecnica/analise-sintatica/#estrutura-do-arquivo-parsery","title":"Estrutura do Arquivo <code>parser.y</code>","text":"<p>O arquivo segue o padr\u00e3o de tr\u00eas se\u00e7\u00f5es:</p>"},{"location":"documentacao-tecnica/analise-sintatica/#1-declaracoes-de-codigo-c","title":"1. Declara\u00e7\u00f5es de c\u00f3digo C (<code>%{ ... %}</code>)","text":"<p>Inclui bibliotecas e vari\u00e1veis globais usadas nas a\u00e7\u00f5es sem\u00e2nticas:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include \"conversor.h\"\n#include \"ast.h\"\n#include \"y.tab.h\"\n\nextern int yylineno;\n\nvoid yyerror(const char *s);\nint yylex(void);\n\nASTNode *ast_root = NULL;\nint current_scope = 0;\n</code></pre> <p>Fun\u00e7\u00f5es auxiliares como <code>create_binary_op()</code> e <code>create_assignment_node()</code> s\u00e3o usadas para montar a AST.</p>"},{"location":"documentacao-tecnica/analise-sintatica/#2-declaracoes-de-tokens-tipos-e-precedencia","title":"2. Declara\u00e7\u00f5es de tokens, tipos e preced\u00eancia","text":"<p>Tokens importados do lexer s\u00e3o declarados com tipos associados via <code>%token &lt;tipo&gt;</code>:</p> <pre><code>%union {\n    char *sval;\n    int ival;\n    float fval;\n    ASTNode *ast;\n}\n\n%token &lt;sval&gt; T_ID T_STRING T_CHAR_LITERAL T_NUMBER_FLOAT\n%token &lt;ival&gt; T_NUMBER_INT\n</code></pre> <p>Tamb\u00e9m s\u00e3o declaradas as palavras-chave (<code>T_IF</code>, <code>T_RETURN</code>, etc.), operadores (<code>T_PLUS</code>, <code>T_EQ</code>, etc.), e s\u00edmbolos (<code>T_LPAREN</code>, <code>T_RBRACE</code>, etc.).</p> <p>A preced\u00eancia dos operadores \u00e9 especificada para resolver ambiguidades:</p> <pre><code>%right T_ASSIGN T_PLUS_ASSIGN T_MINUS_ASSIGN\n%left T_OR\n%left T_AND\n%left T_BIT_OR\n%left T_EQ T_NEQ\n%left T_GT T_LT T_GE T_LE\n%left T_PLUS T_MINUS\n%left T_MULT T_DIV\n%right T_NOT\n</code></pre>"},{"location":"documentacao-tecnica/analise-sintatica/#3-regras-gramaticais-e-acoes","title":"3. Regras Gramaticais e A\u00e7\u00f5es","text":"<p>As produ\u00e7\u00f5es sint\u00e1ticas s\u00e3o definidas com regras BNF-like, com a\u00e7\u00f5es em C entre <code>{}</code>. Exemplo:</p> <pre><code>programa:\n    declaracoes\n    {\n        ast_root = $1;\n    }\n;\n</code></pre> <p>Cada produ\u00e7\u00e3o retorna (via <code>$$</code>) um ponteiro para um n\u00f3 da AST.</p> <p>Outros exemplos de regras incluem:</p>"},{"location":"documentacao-tecnica/analise-sintatica/#funcao-principal","title":"Fun\u00e7\u00e3o principal","text":"<pre><code>funcao_main:\n    T_INT T_MAIN T_LPAREN T_RPAREN bloco\n    {\n        $$ = create_function_node(\"inteiro\", \"inicio\", NULL, $5);\n    }\n;\n</code></pre>"},{"location":"documentacao-tecnica/analise-sintatica/#declaracao-de-variavel","title":"Declara\u00e7\u00e3o de vari\u00e1vel","text":"<pre><code>declaracao:\n    tipo T_ID T_SEMICOLON\n    {\n        $$ = create_declaration_node($1, $2, NULL);\n    }\n;\n</code></pre>"},{"location":"documentacao-tecnica/analise-sintatica/#expressoes-aritmeticas-e-relacionais","title":"Express\u00f5es aritm\u00e9ticas e relacionais","text":"<pre><code>expressao:\n    expressao T_PLUS expressao\n    {\n        $$ = create_binary_op(\"+\", $1, $3);\n    }\n  | T_LPAREN expressao T_RPAREN\n    {\n        $$ = $2;\n    }\n  | T_NUMBER_INT\n    {\n        $$ = create_literal_node(\"int\", $1);\n    }\n;\n</code></pre>"},{"location":"documentacao-tecnica/analise-sintatica/#construcao-da-ast","title":"Constru\u00e7\u00e3o da AST","text":"<p>Cada produ\u00e7\u00e3o cria um n\u00f3 da AST com chamadas:</p> <ul> <li><code>create_declaration_node()</code></li> <li><code>create_binary_op()</code></li> <li><code>create_assignment_node()</code></li> </ul> <p>Essas fun\u00e7\u00f5es est\u00e3o implementadas em <code>ast.c</code> e representam cada parte do c\u00f3digo como um n\u00f3 com tipo, valor e filhos.</p> <p>A raiz da AST \u00e9 armazenada em <code>ast_root</code>.</p>"},{"location":"documentacao-tecnica/analise-sintatica/#tratamento-de-erros","title":"Tratamento de Erros","text":"<p>Erros sint\u00e1ticos s\u00e3o tratados com a fun\u00e7\u00e3o <code>yyerror()</code>:</p> <pre><code>void yyerror(const char *s) {\n    fprintf(stderr, \"Erro na linha %d: %s\n\", yylineno, s);\n}\n</code></pre> <p>Se ocorrer um erro durante a an\u00e1lise, ele ser\u00e1 relatado com a linha correspondente.</p>"},{"location":"documentacao-tecnica/analise-sintatica/#exemplo-de-fluxo","title":"Exemplo de Fluxo","text":"<p>Entrada C:</p> <pre><code>int main() {\n    int x = 10;\n    return x;\n}\n</code></pre> <p>Produ\u00e7\u00f5es ativadas:</p> <ul> <li><code>programa \u2192 declaracoes</code></li> <li><code>funcao_main</code></li> <li><code>bloco \u2192 comandos</code></li> <li><code>comando \u2192 declaracao</code></li> <li><code>declaracao \u2192 tipo T_ID T_SEMICOLON</code></li> <li><code>comando \u2192 return</code></li> </ul> <p>AST gerada (estrutura l\u00f3gica simplificada):</p> <pre><code>programa\n\u2514\u2500\u2500 funcao inicio\n    \u251c\u2500\u2500 declaracao: inteiro x\n    \u2514\u2500\u2500 retorno: x\n</code></pre>"},{"location":"documentacao-tecnica/analise-sintatica/#integracao-com-o-lexer","title":"Integra\u00e7\u00e3o com o Lexer","text":"<p>O parser recebe tokens por meio da fun\u00e7\u00e3o <code>yylex()</code>, que \u00e9 automaticamente invocada. Cada token enviado pelo lexer deve estar declarado no parser com <code>%token</code>, com os mesmos nomes e tipos.</p>"},{"location":"documentacao-tecnica/ci-cd/","title":"Workflows de CI/CD","text":"<p>Este documento descreve os dois workflows automatizados configurados no reposit\u00f3rio GitHub do projeto: um para testes e cobertura do compilador e outro para deploy da documenta\u00e7\u00e3o no GitHub Pages.</p>"},{"location":"documentacao-tecnica/ci-cd/#1-ci-compilador-githubworkflowsciyml","title":"1. CI Compilador (<code>.github/workflows/ci.yml</code>)","text":"<p>Esse workflow \u00e9 executado a cada <code>push</code> para qualquer branch. Ele garante que o compilador est\u00e1 funcionando corretamente e que os testes foram executados com sucesso.</p>"},{"location":"documentacao-tecnica/ci-cd/#etapas","title":"Etapas:","text":"<pre><code>on:\n  push:\n    branches: [\"**\"]\n</code></pre> <p>Executa o workflow para qualquer branch modificada.</p>"},{"location":"documentacao-tecnica/ci-cd/#passos-executados","title":"Passos executados:","text":"<ul> <li> <p>Checkout do c\u00f3digo <pre><code>uses: actions/checkout@v4\n</code></pre></p> </li> <li> <p>Instala\u00e7\u00e3o de depend\u00eancias <pre><code>sudo apt-get update &amp;&amp; sudo apt-get install -y bison flex\n</code></pre></p> </li> <li> <p>Execu\u00e7\u00e3o dos testes com cobertura <pre><code>make coverage\n</code></pre></p> </li> </ul> <p></p> <ul> <li>Publica\u00e7\u00e3o dos artefatos <pre><code>- name: \ud83d\udce4 Publica relat\u00f3rio de cobertura\n  path: compiler-source/cobertura.txt\n\n- name: \ud83d\udce6 Publica bin\u00e1rio compilador\n  path: compiler-source/compilador\n</code></pre></li> </ul> <p>Esses artefatos ficam dispon\u00edveis na aba \"Actions\" do GitHub como evid\u00eancia da execu\u00e7\u00e3o automatizada.</p>"},{"location":"documentacao-tecnica/ci-cd/#2-deploy-da-documentacao-githubworkflowsdeployyml","title":"2. Deploy da Documenta\u00e7\u00e3o (<code>.github/workflows/deploy.yml</code>)","text":"<p>Este workflow \u00e9 respons\u00e1vel por gerar e publicar a documenta\u00e7\u00e3o do projeto automaticamente no GitHub Pages sempre que houver um <code>push</code> para a branch <code>main</code>.</p> <p></p>"},{"location":"documentacao-tecnica/ci-cd/#acionamento","title":"Acionamento:","text":"<pre><code>on:\n  push:\n    branches:\n      - main\n      - fix-ultimo\n</code></pre>"},{"location":"documentacao-tecnica/ci-cd/#permissao","title":"Permiss\u00e3o:","text":"<pre><code>permissions:\n  contents: write\n</code></pre> <p>Essa permiss\u00e3o \u00e9 necess\u00e1ria para permitir que o MkDocs publique diretamente no branch <code>gh-pages</code>.</p>"},{"location":"documentacao-tecnica/ci-cd/#etapas_1","title":"Etapas:","text":"<ul> <li> <p>Checkout do c\u00f3digo <pre><code>uses: actions/checkout@v4\n</code></pre></p> </li> <li> <p>Instala\u00e7\u00e3o do Python e MkDocs <pre><code>uses: actions/setup-python@v5\nwith:\n  python-version: '3.11'\n\npip install mkdocs mkdocs-material\n</code></pre></p> </li> <li> <p>Deploy autom\u00e1tico no GitHub Pages <pre><code>mkdocs gh-deploy --force\n</code></pre></p> </li> </ul>"},{"location":"documentacao-tecnica/ci-cd/#beneficios-gerais-dos-workflows","title":"Benef\u00edcios Gerais dos Workflows","text":"<ul> <li>Automa\u00e7\u00e3o completa da verifica\u00e7\u00e3o e entrega cont\u00ednua</li> <li>Feedback imediato sobre quebras e regress\u00f5es</li> <li>Documenta\u00e7\u00e3o sempre atualizada</li> <li>Armazenamento autom\u00e1tico de artefatos \u00fateis (bin\u00e1rios, cobertura)</li> </ul> <p>Esses workflows promovem um ciclo de desenvolvimento seguro, confi\u00e1vel e padronizado para toda a equipe.</p>"},{"location":"documentacao-tecnica/decisoes-tecnicas/","title":"An\u00e1lise Detalhada das Decis\u00f5es T\u00e9cnicas","text":""},{"location":"documentacao-tecnica/decisoes-tecnicas/#1-requisitos-e-escopo-do-compilador","title":"1. Requisitos e Escopo do Compilador","text":"<p>A principal decis\u00e3o t\u00e9cnica foi definir um subconjunto limitado e estruturado da linguagem C como escopo do projeto. A an\u00e1lise dos arquivos da gram\u00e1tica (<code>parser/parser.y</code>) e do analisador l\u00e9xico (<code>lexer/lexer.l</code>) revela que o compilador foi projetado para englobar os seguintes requisitos funcionais:</p> <ul> <li>Estrutura de Programa: Suporte para m\u00faltiplas fun\u00e7\u00f5es, com a fun\u00e7\u00e3o <code>main</code> sendo o ponto de entrada, traduzida para <code>funcao inicio</code> em Portugol.</li> <li>Tipos de Dados Primitivos: O compilador lida com os tipos de dados fundamentais: <code>int</code> (inteiro), <code>float</code> (real) e <code>char</code> (caractere).</li> <li>Declara\u00e7\u00e3o e Atribui\u00e7\u00e3o: Permite a declara\u00e7\u00e3o de vari\u00e1veis, com ou sem inicializa\u00e7\u00e3o, e comandos de atribui\u00e7\u00e3o simples (<code>=</code>) e compostos (<code>+=</code>, <code>-=</code>).</li> <li>Estruturas de Controle de Fluxo:<ul> <li>Condicionais: Suporte completo para <code>if</code>, <code>else</code> e <code>else if</code>.</li> <li>La\u00e7os de Repeti\u00e7\u00e3o: Implementa\u00e7\u00e3o do <code>while</code> e <code>do-while</code>.</li> </ul> </li> <li>Fun\u00e7\u00f5es: Suporte para declara\u00e7\u00e3o e chamada de fun\u00e7\u00f5es com par\u00e2metros.</li> <li>Operadores: Cobertura de operadores aritm\u00e9ticos (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>), relacionais (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>) e l\u00f3gicos (<code>&amp;&amp;</code>, <code>||</code>, <code>!</code>).</li> <li>Fun\u00e7\u00f5es de E/S B\u00e1sicas: Convers\u00e3o de <code>printf</code> e <code>scanf</code> para as fun\u00e7\u00f5es <code>escreva</code> e <code>leia</code> do Portugol, com tratamento da string de formata\u00e7\u00e3o no <code>printf</code>.</li> </ul>"},{"location":"documentacao-tecnica/decisoes-tecnicas/#2-justificativa-para-as-funcionalidades-nao-implementadas","title":"2. Justificativa para as Funcionalidades N\u00e3o Implementadas","text":"<p>A escolha de n\u00e3o implementar certas caracter\u00edsticas avan\u00e7adas do C foi uma decis\u00e3o t\u00e9cnica crucial para manter a complexidade do projeto gerenci\u00e1vel, considerando o tempo para implementa\u00e7\u00e3o e aprendizado das ferramentas utilizadas.</p>"},{"location":"documentacao-tecnica/decisoes-tecnicas/#por-que-nao-ha-for","title":"Por que n\u00e3o h\u00e1 <code>for</code>?","text":"<p>O la\u00e7o <code>for</code> em C \u00e9, essencialmente, um \"a\u00e7\u00facar sint\u00e1tico\" para o la\u00e7o <code>while</code>. Um comando <code>for (A; B; C) { D; }</code> pode ser reescrito como <code>A; while (B) { D; C; }</code>.</p> <p>A decis\u00e3o de omitir o <code>for</code> simplifica diretamente a gram\u00e1tica no <code>parser/parser.y</code> e a l\u00f3gica de gera\u00e7\u00e3o de c\u00f3digo no <code>conversor.c</code>. Em vez de criar um n\u00f3 <code>NODE_FOR</code> na AST com quatro filhos (inicializa\u00e7\u00e3o, condi\u00e7\u00e3o, incremento e corpo), o compilador pode se concentrar em uma \u00fanica estrutura de la\u00e7o condicional (o <code>while</code>), reduzindo a complexidade de implementa\u00e7\u00e3o sem perder poder computacional essencial.</p>"},{"location":"documentacao-tecnica/decisoes-tecnicas/#por-que-nao-ha-struct","title":"Por que n\u00e3o h\u00e1 <code>struct</code>?","text":"<p>A implementa\u00e7\u00e3o de <code>structs</code> (estruturas) introduziria uma camada significativamente maior de complexidade, por v\u00e1rias raz\u00f5es:</p> <ul> <li>Gerenciamento de Tipos: Seria necess\u00e1rio estender a tabela de s\u00edmbolos para armazenar tipos complexos definidos pelo usu\u00e1rio, incluindo os nomes e tipos de cada um de seus membros.</li> <li>Aloca\u00e7\u00e3o de Mem\u00f3ria e Acesso a Membros: A tradu\u00e7\u00e3o de acesso a membros (<code>.</code> ou <code>-&gt;</code>) exigiria uma l\u00f3gica mais complexa na AST e no gerador de c\u00f3digo. Embora os tokens <code>T_DOT</code> e <code>T_ARROW</code> existam no analisador l\u00e9xico, sua implementa\u00e7\u00e3o na gram\u00e1tica para <code>structs</code> n\u00e3o foi conclu\u00edda.</li> <li>Correspond\u00eancia com Portugol: Muitas implementa\u00e7\u00f5es de Portugol n\u00e3o t\u00eam um equivalente direto e simples para <code>structs</code> (o mais pr\u00f3ximo seria <code>registro</code>). A tradu\u00e7\u00e3o n\u00e3o seria trivial e poderia poluir o objetivo de gerar um c\u00f3digo Portugol claro e idiom\u00e1tico.</li> </ul> <p>A aus\u00eancia dessas funcionalidades define o compilador como um tradutor de C estruturado e procedural, deixando de fora caracter\u00edsticas de mais baixo n\u00edvel ou de agrega\u00e7\u00e3o de dados complexos.</p>"},{"location":"documentacao-tecnica/decisoes-tecnicas/#3-a-escolha-da-ast-como-unico-codigo-intermediario","title":"3. A Escolha da AST como \u00danico C\u00f3digo Intermedi\u00e1rio","text":"<p>A decis\u00e3o de usar a \u00c1rvore Sint\u00e1tica Abstrata (AST) como a \u00fanica representa\u00e7\u00e3o intermedi\u00e1ria (RI) \u00e9 uma escolha de design pragm\u00e1tica e eficiente para este tipo de compilador.</p>"},{"location":"documentacao-tecnica/decisoes-tecnicas/#por-que-a-ast-e-suficiente","title":"Por que a AST \u00e9 suficiente?","text":"<p>Este \u00e9 um compilador de fonte para fonte (source-to-source), que traduz de uma linguagem de alto n\u00edvel (C) para outra (Portugol). As duas linguagens compartilham paradigmas semelhantes (procedural, estruturado).</p> <p>A AST (<code>src/ast.c</code>, <code>include/ast.h</code>) preserva a estrutura hier\u00e1rquica do c\u00f3digo-fonte, o que \u00e9 ideal para este tipo de tradu\u00e7\u00e3o. A fun\u00e7\u00e3o <code>generate_portugol</code> (<code>src/conversor.c</code>) pode simplesmente \"percorrer\" a \u00e1rvore e traduzir cada n\u00f3 estrutural (um <code>if</code>, um <code>while</code>, uma declara\u00e7\u00e3o) para seu equivalente direto em Portugol.</p>"},{"location":"documentacao-tecnica/decisoes-tecnicas/#por-que-nao-usar-outra-ri-como-codigo-de-tres-enderecos","title":"Por que n\u00e3o usar outra RI (como C\u00f3digo de Tr\u00eas Endere\u00e7os)?","text":"<p>Representa\u00e7\u00f5es intermedi\u00e1rias mais baixas, como o C\u00f3digo de Tr\u00eas Endere\u00e7os (C3E), s\u00e3o projetadas para facilitar otimiza\u00e7\u00f5es e a gera\u00e7\u00e3o de c\u00f3digo de m\u00e1quina (assembly). Em C3E, uma express\u00e3o como <code>x = a + b * c</code> \u00e9 quebrada em:</p> <pre><code>t1 = b * c\nx = a + t1\n</code></pre> <p>Para este compilador, gerar C3E a partir da AST para depois gerar Portugol seria um passo desnecess\u00e1rio e contraproducente:</p> <ul> <li>Perda de Estrutura: O C3E \"achata\" as estruturas de controle de alto n\u00edvel (<code>if</code>, <code>while</code>) em saltos condicionais e incondicionais (<code>goto</code>). Reconstruir a estrutura de um <code>se</code> ou <code>enquanto</code> a partir de <code>gotos</code> para gerar um c\u00f3digo Portugol leg\u00edvel seria muito mais complexo do que a tradu\u00e7\u00e3o direta da AST.</li> <li>Complexidade Adicional: Introduziria uma fase inteira de compila\u00e7\u00e3o (gera\u00e7\u00e3o de RI de baixo n\u00edvel) que n\u00e3o agrega valor, dado que o alvo n\u00e3o \u00e9 c\u00f3digo de m\u00e1quina e as otimiza\u00e7\u00f5es complexas est\u00e3o fora do escopo do projeto.</li> </ul> <p>Portanto, a AST foi a decis\u00e3o t\u00e9cnica por ser a representa\u00e7\u00e3o mais simples e direta que atende perfeitamente aos requisitos de um tradutor de C para Portugol com o escopo definido.</p>"},{"location":"documentacao-tecnica/evolucao/","title":"Melhorias Futuras","text":"<p>Este documento apresenta as principais limita\u00e7\u00f5es do compilador desenvolvido e sugere dire\u00e7\u00f5es para evolu\u00e7\u00f5es futuras.</p>"},{"location":"documentacao-tecnica/evolucao/#possiveis-melhorias-futuras","title":"Poss\u00edveis Melhorias Futuras","text":""},{"location":"documentacao-tecnica/evolucao/#1-suporte-a-funcoes-personalizadas","title":"1. Suporte a Fun\u00e7\u00f5es Personalizadas","text":"<ul> <li>Permitir m\u00faltiplas defini\u00e7\u00f5es de fun\u00e7\u00e3o com par\u00e2metros</li> <li>Controlar escopo local e retorno por tipo</li> </ul>"},{"location":"documentacao-tecnica/evolucao/#2-expansao-de-tipos-e-modificadores","title":"2. Expans\u00e3o de Tipos e Modificadores","text":"<ul> <li>Adicionar suporte a <code>double</code>, <code>long</code>, arrays e ponteiros</li> <li>Implementar an\u00e1lise de convers\u00f5es autom\u00e1ticas entre tipos</li> </ul>"},{"location":"documentacao-tecnica/evolucao/#3-analise-de-escopo-avancada","title":"3. An\u00e1lise de Escopo Avan\u00e7ada","text":"<ul> <li>Suporte a blocos internos com escopo local</li> <li>Implementa\u00e7\u00e3o de pilha de escopos na tabela de s\u00edmbolos</li> </ul>"},{"location":"documentacao-tecnica/evolucao/#4-geracao-de-codigo-intermediario","title":"4. Gera\u00e7\u00e3o de C\u00f3digo Intermedi\u00e1rio","text":"<ul> <li>Produzir uma representa\u00e7\u00e3o em c\u00f3digo de tr\u00eas endere\u00e7os</li> <li>Basear-se em uma AST para posterior otimiza\u00e7\u00e3o</li> </ul>"},{"location":"documentacao-tecnica/evolucao/#5-geracao-de-codigo-executavel","title":"5. Gera\u00e7\u00e3o de C\u00f3digo Execut\u00e1vel","text":"<ul> <li>Integra\u00e7\u00e3o com back-end (LLVM ou Assembly)</li> <li>Gera\u00e7\u00e3o de c\u00f3digo de m\u00e1quina simples</li> </ul>"},{"location":"documentacao-tecnica/evolucao/#6-validacao-estatica-e-otimizacoes","title":"6. Valida\u00e7\u00e3o Est\u00e1tica e Otimiza\u00e7\u00f5es","text":"<ul> <li>Verifica\u00e7\u00e3o de inicializa\u00e7\u00e3o de vari\u00e1veis</li> <li>Otimiza\u00e7\u00e3o de express\u00f5es constantes</li> </ul>"},{"location":"documentacao-tecnica/gramatica/","title":"Gram\u00e1tica Formal","text":"<p>Esta se\u00e7\u00e3o apresenta a gram\u00e1tica formal utilizada no compilador de C para Portugol, elaborada com base em um subconjunto da linguagem C. A gram\u00e1tica foi definida com o objetivo de facilitar a an\u00e1lise sint\u00e1tica via Bison e permitir uma tradu\u00e7\u00e3o clara para Portugol.</p>"},{"location":"documentacao-tecnica/gramatica/#objetivo-da-gramatica","title":"Objetivo da Gram\u00e1tica","text":"<p>A gram\u00e1tica define as estruturas sint\u00e1ticas v\u00e1lidas da linguagem-fonte reconhecida pelo compilador, com base nas seguintes premissas:</p> <ul> <li>Uso de uma gram\u00e1tica livre de contexto (GLC) para an\u00e1lise descendente</li> <li>Reconhecimento de estruturas b\u00e1sicas: fun\u00e7\u00f5es, declara\u00e7\u00f5es, express\u00f5es, comandos de controle</li> <li>Prioriza\u00e7\u00e3o da clareza e modularidade para facilitar a constru\u00e7\u00e3o da AST</li> </ul>"},{"location":"documentacao-tecnica/gramatica/#estrutura-da-gramatica","title":"Estrutura da Gram\u00e1tica","text":"<p>A gram\u00e1tica est\u00e1 dividida em componentes principais, cada um representando uma categoria sint\u00e1tica da linguagem:</p>"},{"location":"documentacao-tecnica/gramatica/#programa","title":"Programa","text":"<pre><code>programa:\n    declaracoes\n</code></pre>"},{"location":"documentacao-tecnica/gramatica/#declaracoes","title":"Declara\u00e7\u00f5es","text":"<pre><code>declaracoes:\n    declaracao\n  | declaracoes declaracao\n</code></pre>"},{"location":"documentacao-tecnica/gramatica/#declaracao-de-funcao-principal","title":"Declara\u00e7\u00e3o de Fun\u00e7\u00e3o Principal","text":"<pre><code>funcao_main:\n    T_INT T_MAIN T_LPAREN T_RPAREN bloco\n</code></pre>"},{"location":"documentacao-tecnica/gramatica/#declaracoes-de-variaveis","title":"Declara\u00e7\u00f5es de Vari\u00e1veis","text":"<pre><code>declaracao:\n    tipo T_ID T_SEMICOLON\n  | tipo T_ID T_ASSIGN expressao T_SEMICOLON\n</code></pre>"},{"location":"documentacao-tecnica/gramatica/#tipos-de-dados","title":"Tipos de Dados","text":"<pre><code>tipo:\n    T_INT\n  | T_FLOAT\n  | T_CHAR\n</code></pre>"},{"location":"documentacao-tecnica/gramatica/#comandos","title":"Comandos","text":"<pre><code>comando:\n    declaracao\n  | atribuicao\n  | retorno\n  | chamada_funcao T_SEMICOLON\n  | condicional\n  | iteracao\n  | bloco\n</code></pre>"},{"location":"documentacao-tecnica/gramatica/#atribuicoes","title":"Atribui\u00e7\u00f5es","text":"<pre><code>atribuicao:\n    T_ID T_ASSIGN expressao T_SEMICOLON\n</code></pre>"},{"location":"documentacao-tecnica/gramatica/#retorno","title":"Retorno","text":"<pre><code>retorno:\n    T_RETURN expressao T_SEMICOLON\n</code></pre>"},{"location":"documentacao-tecnica/gramatica/#expressoes","title":"Express\u00f5es","text":"<pre><code>expressao:\n    expressao T_PLUS expressao\n  | expressao T_MINUS expressao\n  | expressao T_MULT expressao\n  | expressao T_DIV expressao\n  | T_LPAREN expressao T_RPAREN\n  | T_NUMBER_INT\n  | T_NUMBER_FLOAT\n  | T_CHAR_LITERAL\n  | T_STRING\n  | T_ID\n</code></pre>"},{"location":"documentacao-tecnica/gramatica/#estruturas-de-controle","title":"Estruturas de Controle","text":""},{"location":"documentacao-tecnica/gramatica/#condicional","title":"Condicional","text":"<pre><code>condicional:\n    T_IF T_LPAREN expressao T_RPAREN bloco\n  | T_IF T_LPAREN expressao T_RPAREN bloco T_ELSE bloco\n</code></pre>"},{"location":"documentacao-tecnica/gramatica/#iteracao","title":"Itera\u00e7\u00e3o","text":"<pre><code>iteracao:\n    T_WHILE T_LPAREN expressao T_RPAREN bloco\n</code></pre>"},{"location":"documentacao-tecnica/gramatica/#bloco","title":"Bloco","text":"<pre><code>bloco:\n    T_LBRACE comandos T_RBRACE\n</code></pre> <pre><code>comandos:\n    comando\n  | comandos comando\n</code></pre>"},{"location":"documentacao-tecnica/gramatica/#chamada-de-funcao","title":"Chamada de Fun\u00e7\u00e3o","text":"<pre><code>chamada_funcao:\n    T_ID T_LPAREN argumentos T_RPAREN\n\nargumentos:\n    /* vazio */\n  | lista_argumentos\n\nlista_argumentos:\n    expressao\n  | lista_argumentos T_COMMA expressao\n</code></pre>"},{"location":"documentacao-tecnica/gramatica/#consideracoes-sobre-ambiguidades","title":"Considera\u00e7\u00f5es sobre Ambiguidades","text":"<p>A gram\u00e1tica resolve ambiguidades por meio de regras de preced\u00eancia e associatividade declaradas no in\u00edcio do arquivo <code>parser.y</code>, como:</p> <pre><code>%left T_PLUS T_MINUS\n%left T_MULT T_DIV\n%right T_ASSIGN\n</code></pre> <p>Essas declara\u00e7\u00f5es evitam conflitos t\u00edpicos de operadores bin\u00e1rios.</p>"},{"location":"documentacao-tecnica/gramatica/#cobertura-e-limitacoes","title":"Cobertura e Limita\u00e7\u00f5es","text":"<p>A gram\u00e1tica cobre:</p> <ul> <li>Fun\u00e7\u00e3o principal <code>main()</code></li> <li>Declara\u00e7\u00e3o de vari\u00e1veis</li> <li>Express\u00f5es aritm\u00e9ticas</li> <li>Condicionais e la\u00e7os</li> <li>Fun\u00e7\u00f5es com par\u00e2metros</li> </ul> <p>Limita\u00e7\u00f5es conhecidas:</p> <ul> <li>N\u00e3o h\u00e1 suporte a <code>struct</code>, <code>for</code>, <code>switch</code>, ponteiros ou arrays</li> <li>A chamada de fun\u00e7\u00e3o \u00e9 suportada apenas com passagem por valor</li> <li>Apenas um escopo global (sem aninhamento de blocos ou m\u00faltiplas fun\u00e7\u00f5es usuais)</li> </ul>"},{"location":"documentacao-tecnica/gramatica/#conclusao","title":"Conclus\u00e3o","text":"<p>A gram\u00e1tica foi elaborada para balancear simplicidade, clareza e funcionalidade, permitindo reconhecer estruturas t\u00edpicas de programas em C e traduzi-las adequadamente para Portugol. Ela serve de base para a an\u00e1lise sint\u00e1tica, constru\u00e7\u00e3o da AST e posterior gera\u00e7\u00e3o de c\u00f3digo.</p>"},{"location":"documentacao-tecnica/testes/","title":"Testes do Compilador","text":"<p>Esta se\u00e7\u00e3o documenta o sistema de testes automatizados desenvolvido para garantir a robustez, corre\u00e7\u00e3o e cobertura da gram\u00e1tica do compilador de C para Portugol.</p> <p>Os testes abrangem aspectos l\u00e9xicos, sint\u00e1ticos e sem\u00e2nticos da linguagem-fonte, bem como a qualidade da sa\u00edda gerada. Todos os testes s\u00e3o executados por meio de scripts shell localizados na pasta <code>compiler-source/bash/</code>.</p>"},{"location":"documentacao-tecnica/testes/#objetivos-dos-testes","title":"Objetivos dos Testes","text":"<ul> <li>Verificar se o compilador aceita e traduz corretamente entradas v\u00e1lidas</li> <li>Identificar se o compilador rejeita e trata adequadamente entradas inv\u00e1lidas</li> <li>Validar regras de escopo, tipos, estruturas de controle e express\u00f5es</li> <li>Garantir cobertura das principais produ\u00e7\u00f5es gramaticais</li> <li>Automatizar a execu\u00e7\u00e3o e facilitar a regress\u00e3o</li> </ul>"},{"location":"documentacao-tecnica/testes/#organizacao-dos-testes","title":"Organiza\u00e7\u00e3o dos Testes","text":"<p>Os testes est\u00e3o organizados por categoria e nomeados com clareza para indicar o foco de cada caso de teste:</p> <ul> <li>L\u00e9xicos: testam caracteres inv\u00e1lidos, strings malformadas, coment\u00e1rios, etc.</li> <li>Sint\u00e1ticos: verificam combina\u00e7\u00f5es de estruturas (if, while, fun\u00e7\u00f5es aninhadas)</li> <li>Sem\u00e2nticos: avaliam declara\u00e7\u00e3o de vari\u00e1veis, tipos, escopos, redeclara\u00e7\u00f5es</li> <li>Gera\u00e7\u00e3o de c\u00f3digo: comparam a sa\u00edda traduzida com a esperada</li> <li>Cobertura de gram\u00e1tica: extraem trechos da execu\u00e7\u00e3o com os caminhos percorridos</li> </ul>"},{"location":"documentacao-tecnica/testes/#como-executar-os-testes","title":"Como Executar os Testes","text":"<p>Dentro da pasta <code>compiler-source/</code>, voc\u00ea pode executar todos os testes com:</p> <pre><code>make test\n</code></pre> <p>Isso percorre todos os scripts da pasta <code>bash/</code> e exibe um resumo no terminal.</p>"},{"location":"documentacao-tecnica/testes/#cobertura-de-gramatica","title":"Cobertura de Gram\u00e1tica","text":"<p>O projeto implementa um mecanismo de an\u00e1lise de cobertura gramatical para verificar, durante os testes, quais produ\u00e7\u00f5es da gram\u00e1tica foram de fato exercitadas. Isso ajuda a identificar partes da gram\u00e1tica que n\u00e3o foram validadas por testes automatizados.</p>"},{"location":"documentacao-tecnica/testes/#como-funciona","title":"Como funciona","text":"<ul> <li>Cada produ\u00e7\u00e3o no <code>parser.y</code> chama a fun\u00e7\u00e3o <code>rule_hit(\"nome_da_regra\")</code> dentro de suas a\u00e7\u00f5es sem\u00e2nticas.</li> <li>A fun\u00e7\u00e3o <code>rule_hit()</code> registra cada ocorr\u00eancia em mem\u00f3ria.</li> <li>Ao final da execu\u00e7\u00e3o do compilador, a fun\u00e7\u00e3o <code>print_grammar_coverage()</code> grava um relat\u00f3rio em <code>cobertura.txt</code>.</li> </ul>"},{"location":"documentacao-tecnica/testes/#exemplo-de-regra-instrumentada","title":"Exemplo de regra instrumentada","text":"<pre><code>function_list:\n    %empty \n    {\n        rule_hit(\"function_list_empty\");\n        $$ = create_node(NODE_EMPTY, NULL);\n    }\n  | function_list function_declaration\n    {\n        rule_hit(\"function_list_append\");\n        // ...\n    }\n;\n</code></pre>"},{"location":"documentacao-tecnica/testes/#exemplo-de-relatorio-coberturatxt","title":"Exemplo de relat\u00f3rio (<code>cobertura.txt</code>)","text":"<pre><code>Cobertura:\nprogram: 1\nfunction_list_empty: 1\nfunction_declaration: 1\nexpression_int: 4\n...\n</code></pre> <p>Esse relat\u00f3rio mostra quantas vezes cada regra foi ativada durante os testes.</p>"},{"location":"documentacao-tecnica/testes/#execucao-no-makefile","title":"Execu\u00e7\u00e3o no Makefile","text":"<p>O alvo <code>make coverage</code> automatiza esse processo:</p> <pre><code>make coverage\n</code></pre> <p>Esse comando:</p> <ul> <li>Executa todos os scripts de teste</li> <li>Redireciona os erros para <code>build/coverage_logs/stderr.log</code></li> <li>Extrai do <code>stderr</code> os blocos com <code>\"COBERTURA DAS REGRAS DA GRAM\u00c1TICA\"</code> e salva em <code>cobertura.txt</code></li> </ul>"},{"location":"documentacao-tecnica/testes/#integracao-com-github-actions","title":"Integra\u00e7\u00e3o com GitHub Actions","text":"<p>Na integra\u00e7\u00e3o cont\u00ednua (CI), o relat\u00f3rio \u00e9 publicado automaticamente:</p> <pre><code>- name: \ud83d\udd27 Compila e roda testes com cobertura\n  run: make coverage\n\n- name: \ud83d\udce4 Publica relat\u00f3rio de cobertura\n  uses: actions/upload-artifact@v4\n  with:\n    name: cobertura\n    path: compiler-source/cobertura.txt\n</code></pre> <p>Isso garante que a equipe possa acompanhar a evolu\u00e7\u00e3o da cobertura gramatical diretamente no reposit\u00f3rio.</p>"},{"location":"documentacao-tecnica/testes/#organizacao-dos-scripts","title":"Organiza\u00e7\u00e3o dos Scripts","text":"<p>Cada script <code>.sh</code>:</p> <ul> <li>Executa um teste isolado com entrada padr\u00e3o ou arquivo</li> <li>Valida se a sa\u00edda foi gerada corretamente</li> <li>Retorna <code>0</code> em caso de sucesso ou <code>1</code> em caso de falha</li> <li>Pode ser rodado individualmente:</li> </ul> <pre><code>bash bash/run_if_test.sh\n</code></pre>"},{"location":"documentacao-tecnica/testes/#testes-implementados","title":"Testes Implementados","text":"<p>Esta se\u00e7\u00e3o descreve individualmente cada teste automatizado implementado na pasta <code>compiler-source/bash/</code>. Os testes foram desenvolvidos para validar funcionalidades espec\u00edficas do compilador, cobrindo diferentes aspectos da linguagem.</p>"},{"location":"documentacao-tecnica/testes/#run_else_testsh","title":"<code>run_else_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Testa a tradu\u00e7\u00e3o e o comportamento de comandos <code>if</code> com cl\u00e1usula <code>else</code>.</p> <p>Entrada <pre><code>int main()\n{\n    int x = 10;\n    if (x &gt; 5)\n    {\n        printf(\"maior\");\n    }\n    else\n    {\n        printf(\"menor ou igual\");\n    }\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>programa\n{\n    funcao inicio()\n    {\n        inteiro x = 10\n\n        se (x &gt; 5)\n        {\n            escreva(\"maior\")\n        }\n        senao\n        {\n            escreva(\"menor ou igual\")\n        }\n        retorne 0\n    }\n}\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_function_call_testsh","title":"<code>run_function_call_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Verifica chamadas de fun\u00e7\u00f5es definidas pelo usu\u00e1rio.</p> <p>Entrada <pre><code>int calculate(int a, int b)\n{\n    int sum = a + b;\n    printf(\"The sum of %d and %d is: %d\\n\", a, b, sum);\n}\n\nint main()\n{\n    calculate(15, 25);\n    calculate(7, 3);\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>programa\n{\n    funcao inteiro calculate(inteiro a, inteiro b)\n    {\n        inteiro sum = a + b\n        escreva(\"The sum of \", a, \" and \", b, \" is: \", sum, \"\\n\")\n    }\n\n    funcao inicio()\n    {\n        calculate(15, 25)\n        calculate(7, 3)\n        retorne 0\n    }\n\n}\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_function_parameter_testsh","title":"<code>run_function_parameter_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Testa fun\u00e7\u00f5es com par\u00e2metros e passagem de argumentos.</p> <p>Entrada <pre><code>int main()\n{\n    parameterTest(5, 10);\n    return 0;\n}\n\nint parameterTest(int a, int b)\n{\n    int x;\n    x = a + b;\n\n    printf(\"\\n--- TESTE DOS PAR\u00c2METROS ---\\n\");\n    printf(\"Valor de a: %d\\n\", a);\n    printf(\"Valor de b: %d\\n\", b);\n    printf(\"Soma (a + b): %d\\n\", x);\n    printf(\"Os par\u00e2metros est\u00e3o funcionando corretamente!\\n\");\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>programa\n{\n    funcao inicio()\n    {\n        parameterTest(5, 10)\n        retorne 0\n    }\n\n    funcao inteiro parameterTest(inteiro a, inteiro b)\n    {\n        inteiro x\n        x = a + b\n\n        escreva(\"\\n\", \"--- TESTE DOS PAR\u00c2METROS ---\", \"\\n\")\n        escreva(\"Valor de a: \", a, \"\\n\")\n        escreva(\"Valor de b: \", b, \"\\n\")\n        escreva(\"Soma (a + b): \", x, \"\\n\")\n        escreva(\"Os par\u00e2metros est\u00e3o funcionando corretamente!\", \"\\n\")\n    }\n}\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_if_testsh","title":"<code>run_if_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Valida a estrutura <code>if</code> isoladamente com express\u00f5es condicionais simples.</p> <p>Entrada <pre><code>int main() {\n    float pi = 3.14;\n    char letra = 'a';\n\n    if (pi &gt; 3) {\n        return 1;\n    }\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>programa\n{\n    funcao inicio()\n    {\n        real pi = 3.14\n        caracter letra = 'a'\n\n        se (pi &gt; 3)\n        {\n            retorne 1\n        }\n        retorne 0\n    }\n}\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_if_while_combination_testsh","title":"<code>run_if_while_combination_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Testa o uso combinado de <code>if</code> e <code>while</code> dentro do mesmo bloco.</p> <p>Entrada <pre><code>int main() {\n    int count = 0;\n    while (count &lt; 5) {\n        if (count % 2 == 0) {\n            printf(\"Even: \");\n            printf(count);\n        } else {\n            printf(\"Odd: \");\n            printf(count);\n        }\n        count = count + 1;\n    }\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>programa\n{\n    funcao inicio()\n    {\n        inteiro count = 0\n        enquanto (count &lt; 5)\n        {\n            se (count % 2 == 0)\n            {\n                escreva(\"Even: \")\n                escreva(count)\n            }\n            senao\n            {\n                escreva(\"Odd: \")\n                escreva(count)\n            }\n            count = count + 1\n        }\n        retorne 0\n    }\n}\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_lexical_invalid_char_textsh","title":"<code>run_lexical_invalid_char_text.sh</code>","text":"<p>Descri\u00e7\u00e3o: Verifica se caracteres ilegais s\u00e3o corretamente rejeitados pelo analisador l\u00e9xico.</p> <p>Entrada <pre><code>int main() {\n    @\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>Erro lexico na linha 2: Caractere inesperado '@'\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_lexical_unterminated_string_testsh","title":"<code>run_lexical_unterminated_string_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Testa o tratamento de strings sem aspas de fechamento.</p> <p>Entrada <pre><code>int main() {\n    printf(\"string without end);\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>Erro lexico na linha 4: string n\u00e3o terminada\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_logical_operators_testsh","title":"<code>run_logical_operators_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Verifica operadores l\u00f3gicos (<code>&amp;&amp;</code>, <code>||</code>, <code>!</code>) em express\u00f5es booleanas.</p> <p>Entrada <pre><code>int main() {\n    int x = 10;\n    int y = 5;\n    int z = 15;\n\n    if (x &gt; y &amp;&amp; z &gt; x) {\n        printf(\"Both conditions are true\");\n    }\n\n    if (x &lt; y || z &gt; y) {\n        printf(\"At least one condition is true\");\n    }\n\n    if (!(x == y)) {\n        printf(\"x is not equal to y\");\n    }\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>programa\n{\n    funcao inicio()\n    {\n        inteiro x = 10\n        inteiro y = 5\n        inteiro z = 15\n\n        se (x &gt; y e z &gt; x)\n        {\n            escreva(\"Both conditions are true\")\n        }\n\n        se (x &lt; y ou z &gt; y)\n        {\n            escreva(\"At least one condition is true\")\n        }\n\n        se (nao (x == y))\n        {\n            escreva(\"x is not equal to y\")\n        }\n        retorne 0\n    }\n}\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_multiple_vars_testsh","title":"<code>run_multiple_vars_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Testa declara\u00e7\u00f5es m\u00faltiplas de vari\u00e1veis do mesmo tipo.</p> <p>Entrada <pre><code>int main() {\n    int num1 = 10;\n    float num2 = 20.5;\n    char grade = 'A';\n    int sum = num1 + 5;\n    float product = num2 * 2.0;\n\n    printf(sum);\n    printf(product);\n    printf(grade);\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>programa\n{\n    funcao inicio()\n    {\n        inteiro num1 = 10\n        real num2 = 20.50\n        caracter grade = 'A'\n        inteiro sum = num1 + 5\n        real product = num2 * 2.00\n        escreva(sum)\n        escreva(product)\n        escreva(grade)\n        retorne 0\n    }\n}\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_nested_conditionals_testsh","title":"<code>run_nested_conditionals_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Avalia <code>if</code> aninhados com m\u00faltiplos blocos.</p> <p>Entrada <pre><code>int main() {\n    int a = 10;\n    int b = 5;\n\n    if (a &gt; b) {\n        printf(\"a is greater than b\");\n        if (a &gt; 15) {\n            printf(\" and a is greater than 15\");\n        } else {\n            printf(\" and a is not greater than 15\");\n        }\n    } else if (b &gt; a) {\n        printf(\"b is greater than a\");\n    } else {\n        printf(\"a and b are equal\");\n    }\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>programa\n{\n    funcao inicio()\n    {\n        inteiro a = 10\n        inteiro b = 5\n\n        se (a &gt; b)\n        {\n            escreva(\"a is greater than b\")\n            se (a &gt; 15)\n            {\n                escreva(\" and a is greater than 15\")\n            }\n            senao\n            {\n                escreva(\" and a is not greater than 15\")\n            }\n        }\n        senao se (b &gt; a)\n        {\n            escreva(\"b is greater than a\")\n        }\n        senao\n        {\n            escreva(\"a and b are equal\")\n        }\n        retorne 0\n    }\n}\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_nested_while_testsh","title":"<code>run_nested_while_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Verifica la\u00e7os <code>while</code> dentro de outros la\u00e7os <code>while</code>.</p> <p>Entrada <pre><code>int main() {\n    int i = 0;\n    while (i &lt; 3) {\n        int j = 0;\n        while (j &lt; 2) {\n            printf(i);\n            printf(j);\n            j = j + 1;\n        }\n        i = i + 1;\n    }\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>programa\n{\n    funcao inicio()\n    {\n        inteiro i = 0\n        enquanto (i &lt; 3)\n        {\n            inteiro j = 0\n            enquanto (j &lt; 2)\n            {\n                escreva(i)\n                escreva(j)\n                j = j + 1\n            }\n            i = i + 1\n        }\n        retorne 0\n    }\n}\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_printf_testsh","title":"<code>run_printf_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Testa o uso do comando <code>printf</code> com argumentos simples e m\u00faltiplos.</p> <p>Entrada <pre><code>int main() {\n    int x = 10;\n    x = x + 3;\n    printf(x);\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>programa\n{\n    funcao inicio()\n    {\n        inteiro x = 10\n\n        x = x + 3\n        escreva(x)\n    }\n}\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_return_testsh","title":"<code>run_return_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Verifica instru\u00e7\u00f5es <code>return</code> e seu impacto na tradu\u00e7\u00e3o.</p> <p>Entrada <pre><code>int obterNumeroCurto()\n{\n    int x = 10;\n    int y = 20;\n    int z = x + y;\n    return z;\n}\n\nint main()\n{\n    int meuNumero = obterNumeroCurto();\n\n    printf(meuNumero);\n\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>programa \n{\n    funcao inteiro obterNumeroCurto()\n    {\n        inteiro x = 10\n        inteiro y = 20\n        inteiro z = x + y\n        retorne z\n    }\n\n    funcao inicio()\n    {\n        inteiro meuNumero = obterNumeroCurto()\n        escreva(meuNumero)\n\n        retorne 0\n}\n}\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_scanf_testsh","title":"<code>run_scanf_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Testa o reconhecimento e tradu\u00e7\u00e3o de comandos <code>scanf</code>.</p> <p>Entrada <pre><code>int main() {\n    int idade;\n    scanf(\"%d\", &amp;idade);\n    if (idade &gt;= 18) {\n        printf(\"maior de idade\");\n    }\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>programa\n{\n    funcao inicio()\n    {\n        inteiro idade\n\n        leia(idade)\n        se (idade &gt;= 18)\n        {\n            escreva(\"maior de idade\")\n        }\n        retorne 0\n    }\n}\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_semantic_redeclared_var_testsh","title":"<code>run_semantic_redeclared_var_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Verifica erro ao redeclarar uma vari\u00e1vel no mesmo escopo.</p> <p>Entrada <pre><code>int main() {\n    int x;\n    int x;\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>Erro sem\u00e2ntico na linha 3: Vari\u00e1vel 'x' j\u00e1 declarada.\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_semantic_undeclared_var_testsh","title":"<code>run_semantic_undeclared_var_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Testa o uso de vari\u00e1veis n\u00e3o declaradas (erro sem\u00e2ntico).</p> <p>Entrada <pre><code>int main() {\n    x = 5;\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>Erro sem\u00e2ntico na linha 2: Vari\u00e1vel 'x' n\u00e3o declarada.\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_type_check_invalid_char_to_int_testsh","title":"<code>run_type_check_invalid_char_to_int_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Testa atribui\u00e7\u00e3o incorreta de <code>char</code> em vari\u00e1vel <code>int</code>.</p> <p>Entrada <pre><code>int main() {\n    int x;\n    x = 'a';\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>Erro de tipo na linha 3: n\u00e3o \u00e9 poss\u00edvel atribuir caracter a vari\u00e1vel do tipo inteiro.\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_type_check_invalid_float_to_int_testsh","title":"<code>run_type_check_invalid_float_to_int_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Testa convers\u00e3o impl\u00edcita incorreta de <code>float</code> para <code>int</code>.</p> <p>Entrada <pre><code>int main() {\n    int x;\n    x = 3.14;\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>Erro de tipo na linha 3: n\u00e3o \u00e9 poss\u00edvel atribuir real a vari\u00e1vel do tipo inteiro.\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_type_check_invalid_string_to_float_testsh","title":"<code>run_type_check_invalid_string_to_float_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Verifica erro ao atribuir <code>string</code> a <code>float</code>.</p> <p>Entrada <pre><code>int main() {\n    float y;\n    y = \"texto\";\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>Erro de tipo na linha 3: n\u00e3o \u00e9 poss\u00edvel atribuir string a vari\u00e1vel do tipo real.\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_type_check_valid_int_testsh","title":"<code>run_type_check_valid_int_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Confirma atribui\u00e7\u00e3o correta entre vari\u00e1veis do tipo <code>int</code>.</p> <p>Entrada <pre><code>int main() {\n    int x;\n    x = 10;\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>[Compila\u00e7\u00e3o sem erros]\n</code></pre></p>"},{"location":"documentacao-tecnica/testes/#run_while_testsh","title":"<code>run_while_test.sh</code>","text":"<p>Descri\u00e7\u00e3o: Testa la\u00e7os simples <code>while</code> com condi\u00e7\u00e3o e corpo v\u00e1lido.</p> <p>Entrada <pre><code>int main() {\n    int i = 0;\n    while (i &lt; 5) {\n        printf(i);\n        i = i + 1;\n    }\n    return 0;\n}\n</code></pre></p> <p>Sa\u00edda esperada <pre><code>programa\n{\n    funcao inicio()\n    {\n        inteiro i = 0\n\n        enquanto (i &lt; 5)\n        {\n            escreva(i)\n            i = i + 1\n        }\n        retorne 0\n    }\n}\n</code></pre></p>"},{"location":"documentacao-tecnica/visao-geral/","title":"Vis\u00e3o Geral","text":"<p>Esta se\u00e7\u00e3o fornece uma vis\u00e3o geral da arquitetura, estrutura e funcionamento do Compilador de C para Portugol, desenvolvido com base em Flex, Bison e C.</p>"},{"location":"documentacao-tecnica/visao-geral/#arquitetura-do-compilador","title":"Arquitetura do Compilador","text":"<p>O compilador foi implementado em C e segue a arquitetura cl\u00e1ssica em etapas, composta por:</p> <ol> <li> <p>An\u00e1lise L\u00e9xica (Lexer)    Utiliza o Flex para reconhecer tokens v\u00e1lidos a partir do c\u00f3digo-fonte.</p> </li> <li> <p>An\u00e1lise Sint\u00e1tica (Parser)    Utiliza o Bison para validar a estrutura do programa com base em uma gram\u00e1tica livre de contexto.</p> </li> <li> <p>An\u00e1lise Sem\u00e2ntica    Realiza verifica\u00e7\u00e3o de escopo, declara\u00e7\u00e3o de vari\u00e1veis, tipos e regras sem\u00e2nticas personalizadas.</p> </li> <li> <p>Gera\u00e7\u00e3o de AST (\u00c1rvore Sint\u00e1tica Abstrata)    Representa\u00e7\u00e3o intermedi\u00e1ria do c\u00f3digo, utilizada para facilitar a tradu\u00e7\u00e3o.</p> </li> <li> <p>Gera\u00e7\u00e3o de C\u00f3digo    Traduz a AST para uma vers\u00e3o equivalente em Portugol, respeitando a estrutura l\u00f3gica do programa original.</p> </li> </ol>"},{"location":"documentacao-tecnica/visao-geral/#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<p>O projeto est\u00e1 organizado da seguinte forma:</p> <pre><code>compiler-source/\n\u251c\u2500\u2500 bash/                    # Scripts automatizados de testes\n\u251c\u2500\u2500 build/                   # Arquivos gerados durante a compila\u00e7\u00e3o (tempor\u00e1rios)\n\u251c\u2500\u2500 include/                 # Arquivos de cabe\u00e7alho (headers)\n\u2502   \u251c\u2500\u2500 ast.h\n\u2502   \u251c\u2500\u2500 conversor.h\n\u2502   \u2514\u2500\u2500 parser.tab.h         # Gerado automaticamente pelo Bison\n\u251c\u2500\u2500 lexer/\n\u2502   \u2514\u2500\u2500 lexer.l              # Regras l\u00e9xicas (Flex)\n\u251c\u2500\u2500 parser/\n\u2502   \u2514\u2500\u2500 parser.y             # Gram\u00e1tica e a\u00e7\u00f5es sem\u00e2nticas (Bison)\n\u251c\u2500\u2500 src/                     # Implementa\u00e7\u00f5es dos m\u00f3dulos em C\n\u2502   \u251c\u2500\u2500 ast.c                # Constru\u00e7\u00e3o e manipula\u00e7\u00e3o da AST\n\u2502   \u251c\u2500\u2500 conversor.c          # Tradu\u00e7\u00e3o da AST para Portugol\n\u2502   \u2514\u2500\u2500 main.c               # Fun\u00e7\u00e3o principal que invoca o compilador\n\u251c\u2500\u2500 tests/                   # Arquivos de entrada para testes manuais\n\u251c\u2500\u2500 compilador               # Execut\u00e1vel gerado ap\u00f3s a compila\u00e7\u00e3o\n\u251c\u2500\u2500 Makefile                 # Script de build automatizado\n</code></pre>"},{"location":"documentacao-tecnica/visao-geral/#fluxo-de-compilacao","title":"Fluxo de Compila\u00e7\u00e3o","text":"<p>O fluxo completo da execu\u00e7\u00e3o do compilador \u00e9 o seguinte:</p> <ol> <li>Entrada: c\u00f3digo-fonte em C via stdin (<code>./compilador &lt; arquivo.c</code>)</li> <li>Flex (<code>lexer.l</code>) identifica os tokens do c\u00f3digo-fonte</li> <li>Bison (<code>parser.y</code>) interpreta os tokens com base na gram\u00e1tica</li> <li>Constru\u00e7\u00e3o da AST com base nas a\u00e7\u00f5es sint\u00e1ticas</li> <li>Verifica\u00e7\u00f5es sem\u00e2nticas (tipos, escopos, redeclara\u00e7\u00f5es)</li> <li>Gera\u00e7\u00e3o do c\u00f3digo em Portugol</li> <li>Sa\u00edda: c\u00f3digo equivalente impresso em stdout</li> </ol>"},{"location":"documentacao-tecnica/visao-geral/#componentes-principais","title":"Componentes Principais","text":"<ul> <li>Flex (<code>lexer.l</code>): identifica identificadores, palavras-chave, n\u00fameros, strings, operadores, delimitadores, etc.</li> <li>Bison (<code>parser.y</code>): define a estrutura da linguagem-fonte e associa a\u00e7\u00f5es sem\u00e2nticas \u00e0s produ\u00e7\u00f5es.</li> <li><code>ast.c/h</code>: define a estrutura em \u00e1rvore das instru\u00e7\u00f5es analisadas, com suporte a n\u00f3s compostos, operadores, chamadas de fun\u00e7\u00e3o, etc.</li> <li><code>tabela.c/h</code>: armazena s\u00edmbolos como vari\u00e1veis, fun\u00e7\u00f5es e seus respectivos tipos e escopos.</li> <li><code>main.c</code>: inicializa a compila\u00e7\u00e3o, invoca o parser, exibe mensagens de erro e imprime a sa\u00edda final.</li> </ul>"},{"location":"documentacao-tecnica/visao-geral/#traducao-para-portugol","title":"Tradu\u00e7\u00e3o para Portugol","text":"<p>Uma das caracter\u00edsticas centrais deste compilador \u00e9 a tradu\u00e7\u00e3o direta das palavras-chave da linguagem C para Portugol. Alguns exemplos:</p> C Portugol <code>int</code> <code>inteiro</code> <code>float</code> <code>real</code> <code>char</code> <code>caracter</code> <code>if</code> <code>se</code> <code>else</code> <code>senao</code> <code>while</code> <code>enquanto</code> <code>return</code> <code>retorne</code> <code>printf</code> <code>escreva</code> <code>scanf</code> <code>leia</code> <p>Essa substitui\u00e7\u00e3o \u00e9 feita durante a travessia da AST e a gera\u00e7\u00e3o da sa\u00edda textual.</p>"},{"location":"guia-usuario/exemplos/","title":"Exemplos","text":"<p>Esta p\u00e1gina apresenta exemplos representativos de programas v\u00e1lidos aceitos pelo compilador, com suas respectivas tradu\u00e7\u00f5es geradas em Portugol. Os exemplos ajudam a compreender a sintaxe da linguagem-fonte e a sa\u00edda esperada.</p>"},{"location":"guia-usuario/exemplos/#exemplo-basico","title":"Exemplo B\u00e1sico","text":"<p>Entrada (C):</p> <pre><code>int main() {\n    int x = 5;\n    return x;\n}\n</code></pre> <p>Sa\u00edda (Portugol):</p> <pre><code>programa\n{\n    funcao inicio()\n    {\n        inteiro x = 5\n        retorne x\n    }\n\n}\n</code></pre>"},{"location":"guia-usuario/exemplos/#estruturas-condicionais","title":"Estruturas Condicionais","text":"<p>Entrada (C):</p> <pre><code>int main() {\n    int nota = 7;\n\n    if (nota &gt;= 6) {\n        printf(\"Aprovado\");\n    } else {\n        printf(\"Reprovado\");\n    }\n\n    return 0;\n}\n</code></pre> <p>Sa\u00edda (Portugol):</p> <pre><code>programa\n{\n    funcao inicio()\n    {\n        inteiro nota = 7\n        se (nota &gt;= 6)\n        {\n            escreva(\"Aprovado\")\n        }\n        senao\n        {\n            escreva(\"Reprovado\")\n        }\n        retorne 0\n    }\n\n}\n</code></pre>"},{"location":"guia-usuario/exemplos/#loops","title":"Loops","text":"<p>Entrada (C):</p> <pre><code>int main() {\n    int i = 0;\n\n    while (i &lt; 3) {\n        printf(\"%d\", i);\n        i = i + 1;\n    }\n\n    return 0;\n}\n</code></pre> <p>Sa\u00edda (Portugol):</p> <pre><code>programa\n{\n    funcao inicio()\n    {\n        inteiro i = 0\n        enquanto (i &lt; 3)\n        {\n            escreva(i)\n            i = i + 1\n        }\n        retorne 0\n    }\n\n}\n</code></pre>"},{"location":"guia-usuario/exemplos/#funcoes","title":"Fun\u00e7\u00f5es","text":"<p>Entrada (C):</p> <pre><code>int quadrado(int x) {\n    return x * x;\n}\n\nint main() {\n    int resultado = quadrado(4);\n    printf(\"%d\", resultado);\n    return 0;\n}\n</code></pre> <p>Sa\u00edda (Portugol):</p> <pre><code>programa\n{\n    funcao inteiro quadrado(inteiro x)\n    {\n        retorne x * x\n    }\n\n    funcao inicio()\n    {\n        inteiro resultado =         quadrado(4)\n\n        escreva(resultado)\n        retorne 0\n    }\n\n}\n</code></pre>"},{"location":"guia-usuario/exemplos/#exemplo-completo","title":"Exemplo Completo","text":"<p>Entrada (C):</p> <pre><code>int main() {\n    float pi = 3.14;\n    char letra = 'a';\n\n    if (pi &gt; 3) {\n        return 1;\n    }\n    return 0;\n}\n</code></pre> <p>Sa\u00edda (Portugol):</p> <pre><code>programa\n{\n    funcao inicio()\n    {\n        real pi = 3.14\n        caracter letra = 'a'\n        se (pi &gt; 3)\n        {\n            retorne 1\n        }\n        retorne 0\n    }\n\n}\n</code></pre>"},{"location":"guia-usuario/exemplos/#como-executar-os-exemplos","title":"Como Executar os Exemplos","text":"<p>Voc\u00ea pode executar os exemplos acima diretamente no terminal utilizando o compilador:</p>"},{"location":"guia-usuario/exemplos/#usando-entrada-direta-via-terminal","title":"Usando entrada direta via terminal","text":"<pre><code>./compilador &lt;&lt;EOF\nint main() {\n    int x = 5;\n    return x;\n}\nEOF\n</code></pre> <p>A sa\u00edda ser\u00e1 exibida em Portugol no terminal.</p>"},{"location":"guia-usuario/exemplos/#usando-echo-para-exemplos-simples","title":"Usando echo para exemplos simples","text":"<pre><code>echo \"int main() { return 0; }\" | ./compilador\n</code></pre>"},{"location":"guia-usuario/exemplos/#usando-um-arquivo-com-codigo-fonte","title":"Usando um arquivo com c\u00f3digo-fonte","text":"<ol> <li>Crie um arquivo <code>exemplo.c</code> com o conte\u00fado desejado.</li> <li>Execute o compilador:</li> </ol> <pre><code>./compilador &lt; exemplo.c\n</code></pre> <p>Ou, para salvar a sa\u00edda em um arquivo <code>.por</code>:</p> <pre><code>./compilador &lt; exemplo.c &gt; exemplo.por\n</code></pre> <p>O arquivo gerado pode ser aberto diretamente no Portugol Studio.</p>"},{"location":"guia-usuario/instalacao/","title":"Instala\u00e7\u00e3o","text":"<p>Este guia apresenta as instru\u00e7\u00f5es para instalar e executar o Compilador de C para Portugol em diferentes sistemas operacionais. O projeto pode ser compilado localmente com <code>make</code>.</p>"},{"location":"guia-usuario/instalacao/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Antes de instalar o compilador, certifique-se de que seu sistema possui os seguintes componentes instalados:</p> <ul> <li>GCC (compilador C)</li> <li>Flex (vers\u00e3o recomendada: 2.6.4)</li> <li>Bison (vers\u00e3o recomendada: 3.8.2)</li> <li>Make (automatizador de build)</li> </ul> <p>Para instalar em distribui\u00e7\u00f5es baseadas em Debian (como Ubuntu):</p> <pre><code>sudo apt update\nsudo apt install build-essential flex bison -y\n</code></pre> <p>Para instalar em MACOS, Instale as depend\u00eancias com Homebrew:</p> <pre><code>brew install flex bison\n</code></pre> <p>No Windows, recomenda-se o uso do WSL (Windows Subsystem for Linux) para garantir compatibilidade com o ambiente de desenvolvimento.</p>"},{"location":"guia-usuario/instalacao/#usando-wsl","title":"Usando WSL:","text":"<ol> <li>Instale o WSL e abra um terminal Ubuntu.</li> </ol> <pre><code>sudo apt update\nsudo apt install build-essential flex bison -y\n</code></pre>"},{"location":"guia-usuario/instalacao/#instalacao_1","title":"Instala\u00e7\u00e3o","text":"<ol> <li>Clone o reposit\u00f3rio:</li> </ol> <pre><code>git clone https://github.com/ccarlaa/Compiladores---Grupo-5.git\ncd Compiladores---Grupo-5/compiler-source\n</code></pre> <ol> <li>Compile o projeto:</li> </ol> <pre><code>make\n</code></pre> <ol> <li>Execute um teste de verifica\u00e7\u00e3o:</li> </ol> <p>Voc\u00ea pode testar o compilador diretamente no terminal com um c\u00f3digo simples:</p> <pre><code>echo \"[C\u00d3DIGO TESTE]\" | ./compilador\n</code></pre> <p>Exemplo:</p> <pre><code>echo \"int main() { return 0; }\" | ./compilador\n</code></pre> <p>A sa\u00edda esperada \u00e9 a impress\u00e3o da \u00c1rvore AST, o c\u00f3digo compilado e a tabela de s\u00edmbolos:</p> <p></p> <p>Ou, para c\u00f3digos maiores e com m\u00faltiplas linhas, use:</p> <pre><code>./compilador &lt;&lt;EOF\n[C\u00d3DIGO TESTE]\nEOF\n</code></pre> <p>Exemplo: <pre><code>./compilador &lt;&lt;EOF\nint main() {\n    int x = 5;\n    return x;\n}\nEOF\n</code></pre></p> <p>A sa\u00edda esperada \u00e9 a impress\u00e3o da \u00c1rvore AST, o c\u00f3digo compilado e a tabela de s\u00edmbolos:</p> <p></p>"},{"location":"guia-usuario/instalacao/#solucao-de-problemas","title":"Solu\u00e7\u00e3o de Problemas","text":"<p>Caso ocorra algum erro durante a instala\u00e7\u00e3o:</p> <ul> <li>Verifique se todas as depend\u00eancias est\u00e3o instaladas corretamente.</li> <li>Certifique-se de que os scripts tenham permiss\u00e3o de execu\u00e7\u00e3o:</li> </ul> <pre><code>chmod +x compilar-linux.sh compilar-macos.sh docker-run.sh\n</code></pre> <ul> <li>Consulte mensagens de erro exibidas no terminal para identificar a causa.</li> <li>No caso de problemas com o <code>make</code>, execute <code>make clean</code> antes de recompilar.</li> </ul>"},{"location":"guia-usuario/uso-basico/","title":"Uso B\u00e1sico","text":"<p>Este guia apresenta uma vis\u00e3o geral da estrutura da linguagem compilada, como executar o compilador e como interpretar os resultados. Tamb\u00e9m detalha os testes dispon\u00edveis e as estruturas suportadas.</p>"},{"location":"guia-usuario/uso-basico/#estrutura-de-um-programa","title":"Estrutura de um Programa","text":"<p>O compilador espera programas escritos em uma linguagem baseada em C. A estrutura m\u00ednima de um programa v\u00e1lido \u00e9:</p> <pre><code>int main() {\n    // corpo da fun\u00e7\u00e3o principal\n}\n</code></pre> <p>No Portugol traduzido, a sa\u00edda esperada ser\u00e1:</p> <pre><code>programa\n{\n    funcao inicio()\n    {\n        // instru\u00e7\u00f5es traduzidas\n    }\n}\n</code></pre>"},{"location":"guia-usuario/uso-basico/#compilando-um-programa","title":"Compilando um Programa","text":"<p>Para compilar um programa escrito na linguagem-fonte, utilize o seguinte comando a partir do diret\u00f3rio <code>compiler-source/</code>:</p> <pre><code>./compilador &lt; caminho/para/seu/arquivo.txt\n</code></pre> <p>Exemplo:</p> <pre><code>./compilador &lt; ../tests/teste1.txt\n</code></pre> <p>Se preferir, voc\u00ea tamb\u00e9m pode digitar o c\u00f3digo diretamente no terminal usando redirecionamento de entrada:</p> <pre><code>./compilador &lt;&lt;EOF\nint main() {\n    int x = 5;\n    return x;\n}\nEOF\n</code></pre>"},{"location":"guia-usuario/uso-basico/#executando-testes","title":"Executando Testes","text":"<p>A pasta <code>bash/</code> cont\u00e9m scripts organizados por tipo de teste. Eles automatizam a verifica\u00e7\u00e3o da tradu\u00e7\u00e3o correta, cobertura da gram\u00e1tica e detec\u00e7\u00e3o de erros.</p>"},{"location":"guia-usuario/uso-basico/#testes-lexicos","title":"Testes L\u00e9xicos","text":"<p>Verificam o reconhecimento de tokens v\u00e1lidos e tratamento de entradas inv\u00e1lidas. Exemplos:</p> <ul> <li><code>run_lexical_invalid_char_text.sh</code>: testa caracteres ilegais.</li> <li><code>run_lexical_unterminated_string_test.sh</code>: testa strings sem fechamento.</li> </ul>"},{"location":"guia-usuario/uso-basico/#testes-sintaticos","title":"Testes Sint\u00e1ticos","text":"<p>Avaliam se a estrutura do c\u00f3digo corresponde \u00e0 gram\u00e1tica definida. Exemplos:</p> <ul> <li><code>run_if_test.sh</code>: testa estruturas <code>if/else</code>.</li> <li><code>run_while_test.sh</code>: testa la\u00e7os <code>while</code>.</li> <li><code>run_nested_while_test.sh</code>: testa la\u00e7os aninhados.</li> <li><code>run_if_while_combination_test.sh</code>: testa o uso combinado de <code>if</code> e <code>while</code>.</li> </ul>"},{"location":"guia-usuario/uso-basico/#testes-semanticos","title":"Testes Sem\u00e2nticos","text":"<p>Detectam erros como uso de vari\u00e1veis n\u00e3o declaradas ou conflitos de tipo. Exemplos:</p> <ul> <li><code>run_semantic_undeclared_var_test.sh</code>: uso de vari\u00e1vel n\u00e3o declarada.</li> <li><code>run_semantic_redeclared_var_test.sh</code>: declara\u00e7\u00e3o duplicada.</li> <li><code>run_type_check_valid_int_test.sh</code>: atribui\u00e7\u00e3o v\u00e1lida.</li> <li><code>run_type_check_invalid_string_to_float_test.sh</code>: atribui\u00e7\u00e3o inv\u00e1lida entre tipos incompat\u00edveis.</li> </ul>"},{"location":"guia-usuario/uso-basico/#scripts-de-automacao-de-testes","title":"Scripts de Automa\u00e7\u00e3o de Testes","text":"<p>Todos os testes est\u00e3o automatizados via <code>Makefile</code>. Para execut\u00e1-los:</p> <pre><code>make test\n</code></pre> <p>Isso executa todos os scripts em sequ\u00eancia e mostra o resultado no terminal.</p>"},{"location":"guia-usuario/uso-basico/#executando-com-analise-de-cobertura","title":"Executando com An\u00e1lise de Cobertura","text":"<p>Voc\u00ea tamb\u00e9m pode gerar um relat\u00f3rio de cobertura da gram\u00e1tica:</p> <pre><code>make coverage\n</code></pre> <p>O relat\u00f3rio ser\u00e1 salvo em <code>cobertura.txt</code>, contendo trechos do <code>stderr</code> que indicam quais regras da gram\u00e1tica foram ativadas.</p>"},{"location":"guia-usuario/uso-basico/#tipos-de-dados-suportados","title":"Tipos de Dados Suportados","text":"<p>A linguagem-fonte reconhece os seguintes tipos de dados:</p> <ul> <li> <p><code>int</code> \u2014 Representa valores inteiros.   Traduzido internamente como tipo <code>inteiro</code>.</p> </li> <li> <p><code>float</code> \u2014 Representa n\u00fameros de ponto flutuante.   Traduzido internamente como tipo <code>real</code>.</p> </li> <li> <p><code>char</code> \u2014 Representa um \u00fanico caractere.   Traduzido internamente como tipo <code>caracter</code>.</p> </li> </ul> <p>Al\u00e9m desses, outros modificadores e palavras-chave relacionadas a tipos tamb\u00e9m s\u00e3o reconhecidos:</p> <ul> <li><code>void</code> \u2014 Indica aus\u00eancia de tipo (ex.: fun\u00e7\u00f5es sem retorno).</li> <li><code>const</code> \u2014 Indica que o valor da vari\u00e1vel n\u00e3o pode ser modificado ap\u00f3s a inicializa\u00e7\u00e3o.</li> <li><code>unsigned</code> \u2014 Modificador que restringe o tipo num\u00e9rico a valores n\u00e3o negativos.</li> </ul> <p>Durante a an\u00e1lise sem\u00e2ntica, o compilador realiza verifica\u00e7\u00f5es como:</p> <ul> <li>Uso de tipos v\u00e1lidos em declara\u00e7\u00f5es e express\u00f5es.</li> <li>Compatibilidade entre tipos em atribui\u00e7\u00f5es, opera\u00e7\u00f5es e chamadas de fun\u00e7\u00e3o.</li> <li>Respeito a modificadores como <code>const</code> em tentativas de modifica\u00e7\u00e3o de vari\u00e1veis.</li> </ul> <p>Essas verifica\u00e7\u00f5es garantem a coer\u00eancia sem\u00e2ntica do programa antes da gera\u00e7\u00e3o de c\u00f3digo.</p>"},{"location":"guia-usuario/uso-basico/#estruturas-de-controle","title":"Estruturas de Controle","text":"<p>A linguagem implementa diversas estruturas de controle da linguagem C, adaptadas com poss\u00edveis tradu\u00e7\u00f5es para facilitar a leitura. A seguir est\u00e3o listadas as principais estruturas reconhecidas:</p>"},{"location":"guia-usuario/uso-basico/#condicionais","title":"Condicionais","text":"<ul> <li><code>if</code> \u2014 Condicional principal   Traduzido como <code>se</code></li> <li><code>else</code> \u2014 Alternativa condicional   Traduzido como <code>senao</code></li> </ul>"},{"location":"guia-usuario/uso-basico/#lacos-de-repeticao","title":"La\u00e7os de Repeti\u00e7\u00e3o","text":"<ul> <li><code>while</code> \u2014 La\u00e7o com teste no in\u00edcio   Traduzido como <code>enquanto</code></li> <li><code>do ... while</code> \u2014 La\u00e7o com teste no final   Traduzido como <code>faca ... enquanto</code></li> <li><code>for</code> \u2014 La\u00e7o com inicializa\u00e7\u00e3o, condi\u00e7\u00e3o e incremento   Traduzido como <code>para</code></li> <li><code>break</code> \u2014 Interrompe o la\u00e7o atual   Traduzido como <code>pare</code></li> <li><code>continue</code> \u2014 Pula para a pr\u00f3xima itera\u00e7\u00e3o do la\u00e7o   Traduzido como <code>continue</code></li> </ul>"},{"location":"guia-usuario/uso-basico/#funcoes","title":"Fun\u00e7\u00f5es","text":"<ul> <li><code>return</code> \u2014 Finaliza uma fun\u00e7\u00e3o e retorna um valor   Traduzido como <code>retorne</code></li> </ul>"},{"location":"guia-usuario/uso-basico/#entrada-e-saida","title":"Entrada e Sa\u00edda","text":"<ul> <li><code>scanf(...)</code> \u2014 Leitura de entrada padr\u00e3o   Traduzido como <code>leia(...)</code></li> <li><code>printf(...)</code> \u2014 Impress\u00e3o na sa\u00edda padr\u00e3o   Traduzido como <code>escreva(...)</code></li> </ul> <p>Exemplo:</p> <pre><code>if (x &gt; 10) {\n    printf(\"maior\");\n} else {\n    printf(\"menor\");\n}\n</code></pre> <p>Traduzido para:</p> <pre><code>se (x &gt; 10)\n{\n    escreva(\"maior\")\n}\nsenao\n{\n    escreva(\"menor\")\n}\n</code></pre>"},{"location":"referencias/referencias/","title":"Refer\u00eancias","text":"<p>Esta se\u00e7\u00e3o re\u00fane as principais fontes consultadas para a constru\u00e7\u00e3o do compilador, elabora\u00e7\u00e3o da gram\u00e1tica, uso das ferramentas Flex e Bison, bem como metodologias adotadas no projeto e bibliografia recomendada pelo professor.</p>"},{"location":"referencias/referencias/#materiais-da-disciplina","title":"Materiais da Disciplina","text":"<ul> <li> <p>FREITAS, Sergio A. A. \u2013 Proposta de Trabalho para a disciplina Compiladores 1 (2025/1).   Dispon\u00edvel no GitHub da disciplina: https://github.com/sergioaafreitas/COMP1</p> </li> <li> <p>Guia \u2013 Projeto de um Compilador.   Documento elaborado pelo professor, com cronograma e orienta\u00e7\u00f5es de implementa\u00e7\u00e3o.</p> </li> <li> <p>Guia \u2013 Configura\u00e7\u00e3o do Ambiente.   Instru\u00e7\u00f5es para instala\u00e7\u00e3o de Flex, Bison, compilador C e ferramentas de desenvolvimento.</p> </li> </ul>"},{"location":"referencias/referencias/#bibliografia-tecnica","title":"Bibliografia T\u00e9cnica","text":"<ul> <li> <p>AHO, Alfred V.; LAM, Monica S.; SETHI, Ravi; ULLMAN, Jeffrey D. Compilers: Principles, Techniques, and Tools (2\u00aa edi\u00e7\u00e3o). Pearson, 2006.  </p> </li> <li> <p>GNU Bison Manual (Free Software Foundation). https://www.gnu.org/software/bison/manual/</p> </li> <li> <p>Flex \u2013 The Fast Lexical Analyzer https://westes.github.io/flex/manual/</p> </li> </ul>"},{"location":"referencias/referencias/#ferramentas-utilizadas","title":"Ferramentas Utilizadas","text":"<ul> <li>Flex (vers\u00e3o 2.6.4) \u2013 Gerador de analisadores l\u00e9xicos.</li> <li>Bison (vers\u00e3o 3.8.2) \u2013 Gerador de analisadores sint\u00e1ticos.</li> <li>GCC \u2013 Compilador C.</li> <li>Make \u2013 Automa\u00e7\u00e3o de compila\u00e7\u00e3o.</li> <li>Shell Script (bash) \u2013 Execu\u00e7\u00e3o de testes automatizados.</li> <li>MkDocs + Material for MkDocs \u2013 Documenta\u00e7\u00e3o do projeto.</li> <li>Portugol Studio \u2013 Interpreta\u00e7\u00e3o do c\u00f3digo traduzido.</li> </ul>"},{"location":"referencias/referencias/#referencias-complementares","title":"Refer\u00eancias Complementares","text":"<ul> <li> <p>SILVA, Edson dos Santos. Construindo Compiladores com Flex e Bison. Apostila complementar (consultada por diversos alunos em projetos semelhantes).</p> </li> <li> <p>Documenta\u00e7\u00e3o oficial do Portugol Studio: https://portugol-webstudio.cubos.io</p> </li> </ul>"},{"location":"sprints/","title":"Evolu\u00e7\u00e3o do Compilador","text":"<p>Esta se\u00e7\u00e3o apresenta um hist\u00f3rico das principais evolu\u00e7\u00f5es t\u00e9cnicas e funcionais do compilador ao longo do desenvolvimento, organizadas por fase. O objetivo \u00e9 destacar decis\u00f5es importantes, melhorias incrementais e avan\u00e7os em cada etapa da constru\u00e7\u00e3o do projeto.</p>"},{"location":"sprints/#sprint-1-planejamento-e-ambiente","title":"Sprint 1 \u2013 Planejamento e Ambiente","text":"<ul> <li>Defini\u00e7\u00e3o da linguagem-fonte baseada em um subconjunto de C</li> <li>Configura\u00e7\u00e3o do ambiente com Flex, Bison, GCC e Git</li> <li>Estrutura\u00e7\u00e3o inicial do reposit\u00f3rio</li> <li>Cria\u00e7\u00e3o de um arquivo <code>lexer.l</code> com os primeiros tokens simples</li> <li>Configura\u00e7\u00e3o do <code>parser.y</code> com uma produ\u00e7\u00e3o base (<code>programa</code>)</li> </ul>"},{"location":"sprints/#sprint-2-analise-lexica-e-sintatica","title":"Sprint 2 \u2013 An\u00e1lise L\u00e9xica e Sint\u00e1tica","text":"<ul> <li>Expans\u00e3o do analisador l\u00e9xico (<code>lexer.l</code>) com suporte a:</li> <li>Palavras-chave (<code>if</code>, <code>else</code>, <code>while</code>, <code>return</code>, etc.)</li> <li>Tipos primitivos (<code>int</code>, <code>float</code>, <code>char</code>)</li> <li>Literais (inteiros, floats, strings, caracteres)</li> <li>Operadores e delimitadores</li> <li>Desenvolvimento das regras gramaticais principais no <code>parser.y</code></li> <li>Implementa\u00e7\u00e3o inicial da \u00e1rvore sint\u00e1tica abstrata (AST)</li> <li>Testes b\u00e1sicos com c\u00f3digo m\u00ednimo para validar integra\u00e7\u00e3o Flex/Bison</li> </ul>"},{"location":"sprints/#sprint-3-analise-semantica","title":"Sprint 3 \u2013 An\u00e1lise Sem\u00e2ntica","text":"<ul> <li>Introdu\u00e7\u00e3o da tabela de s\u00edmbolos (<code>tabela.c/h</code>)</li> <li>Verifica\u00e7\u00f5es de:</li> <li>Vari\u00e1veis n\u00e3o declaradas</li> <li>Redeclara\u00e7\u00e3o de identificadores</li> <li>Tipos incompat\u00edveis em express\u00f5es e atribui\u00e7\u00f5es</li> <li>Testes negativos para casos sem\u00e2nticos</li> <li>Estrutura\u00e7\u00e3o de escopos e tipos na AST</li> </ul>"},{"location":"sprints/#sprint-4-geracao-de-codigo","title":"Sprint 4 \u2013 Gera\u00e7\u00e3o de C\u00f3digo","text":"<ul> <li>Cria\u00e7\u00e3o do m\u00f3dulo <code>conversor.c</code> para convers\u00e3o da AST em Portugol</li> <li>Mapeamento das palavras-chave e estruturas C \u2192 Portugol</li> <li>Implementa\u00e7\u00e3o de fun\u00e7\u00f5es de impress\u00e3o de c\u00f3digo (tradu\u00e7\u00e3o)</li> <li>Primeira vers\u00e3o funcional completa do compilador ponta a ponta</li> <li>Ajustes de ordem de n\u00f3s na AST para refletir blocos e comandos</li> </ul>"},{"location":"sprints/#sprint-5-testes-e-cobertura","title":"Sprint 5 \u2013 Testes e Cobertura","text":"<ul> <li>Cria\u00e7\u00e3o da su\u00edte de testes automatizados com scripts bash</li> <li>Implementa\u00e7\u00e3o de <code>make test</code> e <code>make coverage</code></li> <li>Gera\u00e7\u00e3o de <code>cobertura.txt</code> com an\u00e1lise de regras ativadas</li> <li>Inclus\u00e3o de testes l\u00e9xicos, sint\u00e1ticos e sem\u00e2nticos com entrada real</li> <li>Valida\u00e7\u00e3o da tradu\u00e7\u00e3o correta de fun\u00e7\u00f5es, la\u00e7os e condicionais</li> </ul>"},{"location":"sprints/#sprint-6-entrevista-refino-e-documentacao","title":"Sprint 6 \u2013 Entrevista, Refino e Documenta\u00e7\u00e3o","text":"<ul> <li>Organiza\u00e7\u00e3o da documenta\u00e7\u00e3o do projeto com MkDocs</li> <li>Revis\u00e3o final dos testes</li> </ul> <p>O compilador evoluiu de um prot\u00f3tipo com apenas regras l\u00e9xicas at\u00e9 um sistema funcional que:</p> <ul> <li>L\u00ea programas em C simplificado</li> <li>Gera uma \u00e1rvore sint\u00e1tica abstrata</li> <li>Realiza an\u00e1lise sem\u00e2ntica com verifica\u00e7\u00e3o de tipos e escopo</li> <li>Produz c\u00f3digo equivalente em Portugol</li> <li>Permite testes automatizados com an\u00e1lise de cobertura</li> </ul>"}]}